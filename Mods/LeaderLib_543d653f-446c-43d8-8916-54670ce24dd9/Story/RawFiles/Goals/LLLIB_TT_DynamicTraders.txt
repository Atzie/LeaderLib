Version 1
SubGoalCombiner SGC_AND
INITSECTION
//Settings
//DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn)
//DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
//DB_LLLIB_Traders_RegisteredLevel(_TraderID, _Level, _RequirementID)
//DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z)
//DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
//DB_LLLIB_Traders_CreationEvents(_TraderID, _EventName)

//Dynamic
//DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);

//Ref
//DB_LLLIB_Requirement_PartyLevel(_RequirementID, _MinLevel, _MaxLevel)
//DB_LLLIB_Requirement_Flag(_RequirementID, _Flag, _FlagType, _FlagVal)
//DB_LLLIB_Requirement_MaxItemAmount(_RequirementID, _MaxAmount)
KBSECTION
//REGION REGISTERING
PROC
LLLIB_Trader_Register_Trader((STRING)_TraderID, (STRING)_Template)
AND
NOT DB_LLLIB_Traders_RegisteredTrader(_TraderID,_,_)
THEN
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, 0);

PROC
LLLIB_Trader_Register_Trader((STRING)_TraderID, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
DB_LLLIB_Traders_RegisteredTrader(_TraderID,_,_)
THEN
LeaderLog_Debug("[LLLIB:Trader][ERROR] Error adding trader with ID '", _TraderID, "': Trader already exists!");

PROC
LLLIB_Trader_Register_Trader((STRING)_TraderID, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
NOT DB_LLLIB_Traders_RegisteredTrader(_TraderID,_,_)
THEN
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn);

PROC
LLLIB_Trader_Register_GlobalTrader((STRING)_TraderID, (CHARACTERGUID)_Trader)
THEN
DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader);

PROC
LLLIB_Trader_Register_Level((STRING)_TraderID, (STRING)_Level)
THEN
LLLIB_Trader_Register_Level(_TraderID, _Level, "");

PROC
LLLIB_Trader_Register_Level((STRING)_TraderID, (STRING)_Level, (STRING)_Requirement)
AND
NOT DB_LLLIB_Traders_RegisteredLevel(_TraderID,_Level,_)
THEN
DB_LLLIB_Traders_RegisteredLevel(_TraderID, _Level, _Requirement);

PROC
LLLIB_Trader_Register_Position((STRING)_TraderID, (STRING)_Level, (REAL)_x, (REAL)_y, (REAL)_z)
AND
NOT DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _,_,_)
THEN
DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z);

PROC
LLLIB_Trader_Register_PositionTrigger((STRING)_TraderID, (STRING)_Level, (TRIGGERGUID)_Trigger)
AND
NOT DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _)
THEN
DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger);

PROC
LLLIB_Trader_Register_CreationEvent((STRING)_TraderID, (STRING)_EventName)
THEN
DB_LLLIB_Traders_CreationEvents(_TraderID, _EventName);
//END_REGION

//REGION QUERIES
QRY
LLLIB_QRY_Traders_HasPosition((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _PosX, _PosY, _PosZ)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Traders_HasPosition((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
THEN
DB_NOOP(1);
//END_REGION

//REGION SPAWNING
PROC
LLLIB_Traders_CreateTraders((STRING)_Level)
AND
DB_LLLIB_Traders_RegisteredLevel(_TraderID, _Level, _Requirement)
AND
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
AND
LLLIB_QRY_Traders_HasPosition(_TraderID, _Level)
THEN
LLLIB_Traders_SpawnTrader(_TraderID, _Level, _Template, _PlaySpawn);

PROC
LLLIB_Traders_CreateTraders((STRING)_Level)
AND
DB_LLLIB_Traders_RegisteredLevel(_TraderID, _Level, _Requirement)
AND
DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
AND
ObjectExists(_Trader, 1)
AND
LLLIB_QRY_Traders_HasPosition(_TraderID, _Level)
THEN
LLLIB_Traders_TeleportToPosition(_TraderID, _Level, _Trader);
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);

PROC
LLLIB_Traders_CreateTrader((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn)
AND
LLLIB_QRY_Traders_HasPosition(_TraderID, _Level)
THEN
LLLIB_Traders_SpawnTrader(_TraderID, _Level, _Template, _PlaySpawn);

PROC
LLLIB_Traders_CreateTrader((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
AND
ObjectExists(_Trader, 1)
AND
LLLIB_QRY_Traders_HasPosition(_TraderID, _Level)
THEN
LLLIB_Traders_TeleportToPosition(_TraderID, _Level, _Trader);
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);

PROC
LLLIB_Traders_SpawnTrader((STRING)_TraderID, (STRING)_Level, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
AND
DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
AND
GetPosition(_Trigger,_x,_y,_z)
AND
CharacterCreateAtPosition(_x,_y,_z, _Template, _PlaySpawn, _Trader)
THEN
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);

PROC
LLLIB_Traders_SpawnTrader((STRING)_TraderID, (STRING)_Level, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
AND
DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z)
AND
CharacterCreateAtPosition(_x,_y,_z, _Template, _PlaySpawn, _Trader)
THEN
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);

PROC
LLLIB_Traders_TeleportToPosition((STRING)_TraderID, (STRING)_Level, (CHARACTERGUID)_Trader)
AND
DB_LLLIB_Traders_CreationEvents(_TraderID, _TeleportEvent)
THEN
LLLIB_Traders_TeleportToPosition(_TraderID, _Level, _Trader, _TeleportEvent);

PROC
LLLIB_Traders_TeleportToPosition((STRING)_TraderID, (STRING)_Level, (CHARACTERGUID)_Trader)
AND
NOT DB_LLLIB_Traders_CreationEvents(_TraderID, _TeleportEvent)
THEN
LLLIB_Traders_TeleportToPosition(_TraderID, _Level, _Trader, "");

PROC
LLLIB_Traders_TeleportToPosition((STRING)_TraderID, (STRING)_Level, (CHARACTERGUID)_Trader, (STRING)_TeleportEvent)
AND
DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
AND
GetPosition(_Trigger,_x,_y,_z)
THEN
TeleportToPosition(_Trader, _x,_y,_z, _TeleportEvent, 0, 1);

PROC
LLLIB_Traders_TeleportToPosition((STRING)_TraderID, (STRING)_Level, (CHARACTERGUID)_Trader, (STRING)_TeleportEvent)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
AND
DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z)
THEN
TeleportToPosition(_Trader, _x,_y,_z, _TeleportEvent, 0, 1);

//Creation events
IF
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
AND
DB_LLLIB_Traders_CreationEvents(_TraderID, _EventName)
THEN
SetStoryEvent(_Trader, _EventName);

//Generate treasure on spawn
IF
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
THEN
SetStoryEvent(_Trader, "LLLIB_GenerateTreasure");
//END_REGION

//END_REGION

//REGION REQUIREMENT_SPAWNING
IF
ObjectFlagSet(_Flag, _Object, _)
AND
DB_LLLIB_Requirement_Flag(_RequirementID, _Flag, "Object", 1)
THEN
LLLIB_Traders_SpawnIfRequirementsMet(_RequirementID);

IF
ObjectFlagCleared(_Flag, _Object, _)
AND
DB_LLLIB_Requirement_Flag(_RequirementID, _Flag, "Object", 0)
THEN
LLLIB_Traders_SpawnIfRequirementsMet(_RequirementID);

IF
ObjectFlagSet(_Flag, (CHARACTERGUID)_Object, _)
AND
UserGetFlag(_Object, _Flag, _FlagVal)
AND
DB_LLLIB_Requirement_Flag(_RequirementID, _Flag, "User", _FlagVal)
THEN
LLLIB_Traders_SpawnIfRequirementsMet(_RequirementID);

IF
ObjectFlagCleared(_Flag, (CHARACTERGUID)_Object, _)
AND
UserGetFlag(_Object, _Flag, _FlagVal)
AND
DB_LLLIB_Requirement_Flag(_RequirementID, _Flag, "User", _FlagVal)
THEN
LLLIB_Traders_SpawnIfRequirementsMet(_RequirementID);

IF
GlobalFlagSet(_Flag)
AND
DB_LLLIB_Requirement_Flag(_RequirementID, _Flag, "Global", 1)
THEN
LLLIB_Traders_SpawnIfRequirementsMet(_RequirementID);

IF
GlobalFlagCleared(_Flag)
AND
DB_LLLIB_Requirement_Flag(_RequirementID, _Flag, "Global", 0)
THEN
LLLIB_Traders_SpawnIfRequirementsMet(_RequirementID);

IF
CharacterLeveledUp(_Player)
AND
DB_CurrentLevel(_Level)
AND
DB_LLLIB_Traders_RegisteredLevel(_TraderID, _Level, _RequirementID)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
AND
LLLIB_QRY_Requirements_PartyLevelMet(_RequirementID)
AND
LLLIB_QRY_Requirements_PartyFlagMet(_RequirementID)
THEN
LLLIB_Traders_CreateTrader(_TraderID, _Level);

PROC
LLLIB_Traders_SpawnIfRequirementsMet((STRING)_RequirementID)
AND
DB_CurrentLevel(_Level)
AND
DB_LLLIB_Traders_RegisteredLevel(_TraderID, _Level, _RequirementID)
AND
LLLIB_QRY_Requirements_PartyLevelMet(_RequirementID)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
THEN
LLLIB_Traders_CreateTrader(_TraderID, _Level);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LLLIB_TreasureAndTraders"
