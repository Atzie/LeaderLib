Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LLLIB_Sorter_Codex(_Index, _Char)
//DB_LLLIB_Sorter_Iterator(_Index)
//DB_LLLIB_Sorter_SortIterator(_Index)
/*TIMERS*/
//DB_LLLIB_Sorter_Temp_RunningSession(_SessionID, _TimerName, _TickRate, _CompleteEvent)
/*Output*/
//DB_LLLIB_Sorter_FinalSorted(_SessionID, _Index, _ID, _Str)
/*Input*/
//DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str)
//DB_LLLIB_Sorter_Temp_StringQueueDuplicates(_SessionID, _ID, _Str, _LinkedID)
/*COUNTING*/
//DB_LLLIB_Sorter_Temp_TotalStringsInQueue(_SessionID, _Total)
//DB_LLLIB_Sorter_Temp_TotalStringsInChar(_SessionID, _Char, _Total)
//DB_LLLIB_Sorter_Temp_TotalStringsInGroup(_SessionID, _ParentChar, _Group, _Total)
/*SORTING_ITERATOR*/
//DB_LLLIB_Sorter_Temp_MainCharIndex(_SessionID, _CharIndex)
/*SORTING*/
//DB_LLLIB_Sorter_Temp_MatchedChar(_SessionID, _Char, _ID)
/*GROUPING*/
//DB_LLLIB_Sorter_Temp_NextGroupForSorting(_SessionID, _Char, _Group)
//DB_LLLIB_Sorter_Temp_Group(_Index, _SessionID, _Char, _Group)
//DB_LLLIB_Sorter_Temp_GroupEntry(_SessionID, _SortIndex, _Char, _Group, _ID, _Str, _LastSubIndex)
/*DUPLICATES*/
//DB_LLLIB_Sorter_Temp_HadDuplicate(_SessionID, _Char, _Group, _ID)
/*ITERATOR*/
//DB_LLLIB_Sorter_Temp_GroupIndexRange(_SessionID, _Least, _Max)
//DB_LLLIB_Sorter_Temp_GroupIterator(_SessionID, _Index)
KBSECTION
//REGION STRING_ADDING
//Run this first to add strings to sort.
PROC
LLLIB_Sorter_AddString((STRING)_SessionID, (STRING)_ID, (STRING)_Str)
AND
NOT DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str)
THEN
DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str);

PROC
LLLIB_Sorter_FinalizeString((STRING)_SessionID, (STRING)_ID, (STRING)_Str)
AND
DB_LLLIB_Sorter_Temp_NextSortedIndex(_SessionID, _Index)
THEN
NOT DB_LLLIB_Sorter_Temp_NextSortedIndex(_SessionID, _Index);

PROC
LLLIB_Sorter_FinalizeString((STRING)_SessionID, (STRING)_ID, (STRING)_Str)
AND
NOT DB_LLLIB_Sorter_Temp_NextSortedIndex(_SessionID, _)
THEN
DB_LLLIB_Sorter_Temp_NextSortedIndex(_SessionID, 0);

PROC
LLLIB_Sorter_FinalizeString((STRING)_SessionID, (STRING)_ID, (STRING)_Str)
AND
DB_LLLIB_Sorter_FinalSorted(_SessionID, _Index, _, _)
AND
DB_LLLIB_Sorter_Temp_NextSortedIndex(_SessionID, _LastIndex)
AND
_Index >= _LastIndex
AND
IntegerSum(_Index, 1, _NextIndex)
THEN
NOT DB_LLLIB_Sorter_Temp_NextSortedIndex(_SessionID, _LastIndex);
DB_LLLIB_Sorter_Temp_NextSortedIndex(_SessionID, _NextIndex);

PROC
LLLIB_Sorter_FinalizeString((STRING)_SessionID, (STRING)_ID, (STRING)_Str)
AND
DB_LLLIB_Sorter_Temp_NextSortedIndex(_SessionID, _Index)
THEN
DB_LLLIB_Sorter_FinalSorted(_SessionID, _Index, _ID, _Str);
LLLIB_Sorter_ClearStringFromQueue(_SessionID, _ID, _Str);
LeaderLog_Log("DEBUG", "[LLLIB:Sorter] [",_SessionID,"] Finalized string '",_Str,"'.");

PROC
LLLIB_Sorter_FinalizeString((STRING)_SessionID, (STRING)_ID, (STRING)_Str)
AND
DB_LLLIB_Sorter_Temp_StringQueueDuplicates(_SessionID, _OtherID, _OtherStr, _ID)
THEN
NOT DB_LLLIB_Sorter_Temp_StringQueueDuplicates(_SessionID, _OtherID, _OtherStr, _ID);
LeaderLog_Log("DEBUG", "[LLLIB:Sorter] [",_SessionID,"] Finalized duplicate of '",_Str,"'.");
LLLIB_Sorter_FinalizeString(_SessionID, _OtherID, _OtherStr);

PROC
LLLIB_Sorter_ClearStringFromQueue((STRING)_SessionID, (STRING)_ID, (STRING)_Str)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str)
THEN
NOT DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str);

PROC
LLLIB_Sorter_SaveStrings((STRING)_SessionID)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str)
THEN
DB_LLLIB_Sorter_Temp_StringBackup(_SessionID, _ID, _Str);

PROC
LLLIB_Sorter_AddUnsortedStrings((STRING)_SessionID)
AND
DB_LLLIB_Sorter_Temp_StringBackup(_SessionID, _ID, _Str)
AND
NOT DB_LLLIB_Sorter_FinalSorted(_SessionID, _, _ID, _Str)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:Sorter][ERROR] [",_SessionID,"] String '",_Str,"' returned unsorted. Adding back in at the end.");
LLLIB_Sorter_FinalizeString(_SessionID, _ID, _Str);
NOT DB_LLLIB_Sorter_Temp_StringBackup(_SessionID, _ID, _Str);
//END_REGION

//REGION START
PROC
LLLIB_Sorter_StartSorting((STRING)_SessionID, (STRING)_CompleteEvent, (INTEGER)_TickRate)
THEN
DB_LLLIB_Sorter_Temp_RunningSession(_SessionID, _TickRate, _CompleteEvent);
DB_LLLIB_Sorter_Internal_RemoveDuplicatesFromQueue(_SessionID);
LLLIB_Sorter_SaveStrings(_SessionID);
LLLIB_Sorter_DetermineStringLengths(_SessionID);
LLLIB_Sorter_Internal_Quicksort_StartSorting(_SessionID);


PROC
LLLIB_Sorter_DetermineStringLengths((STRING)_SessionID)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str)
AND
NOT DB_LLLIB_Sorter_StringLength(_Str, _)
THEN
LLLIB_Sorter_DetermineStringLength(_Str);

QRY
LLLIB_Sorter_QRY_QueueEmpty((STRING)_SessionID)
AND
NOT DB_LLLIB_Sorter_Temp_StringQueue(_SessionID,_,_)
THEN
DB_NOOP(1);

PROC
LLLIB_Sorter_SortingComplete((STRING)_SessionID)
AND
DB_LLLIB_Sorter_Temp_RunningSession(_SessionID, _TickRate, _CompleteEvent)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:Sorter] [",_SessionID,"] Sorting complete. Sending completion event [",_CompleteEvent,"].");
LLLIB_Sorter_AddUnsortedStrings(_SessionID);
LLLIB_Events_SendEvent(_CompleteEvent);
NOT DB_LLLIB_Sorter_Temp_RunningSession(_SessionID, _TickRate, _CompleteEvent);
//END_REGION

//REGION TOTAL_STRINGS
QRY
LLLIB_Sorter_QRY_CountStringsInQueue((STRING)_SessionID)
AND
NOT DB_LLLIB_Sorter_Temp_TotalStringsInQueue(_SessionID, _)
THEN
DB_LLLIB_Sorter_Temp_TotalStringsInQueue(_SessionID, 0);

QRY
LLLIB_Sorter_QRY_CountStringsInQueue((STRING)_SessionID)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str)
AND
DB_LLLIB_Sorter_Temp_TotalStringsInQueue(_SessionID, _Total)
AND
IntegerSum(_Total, 1, _NewTotal)
THEN
NOT DB_LLLIB_Sorter_Temp_TotalStringsInQueue(_SessionID, _Total);
DB_LLLIB_Sorter_Temp_TotalStringsInQueue(_SessionID, _NewTotal);
//END_REGION

//REGION DUPLICATE_CHECK
PROC
DB_LLLIB_Sorter_Internal_RemoveDuplicatesFromQueue((STRING)_SessionID)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _OtherID, _Str)
AND
_ID != _OtherID
AND
DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _ID, _Str) // Check that it still exists
THEN
LeaderLog_Log("DEBUG", "[LLLIB:Sorter] [",_SessionID,"] Duplicate [",_OtherID,"] found for [",_ID,"][",_Str,"]. Removing from queue.");
DB_LLLIB_Sorter_Temp_StringQueueDuplicates(_SessionID, _OtherID, _Str, _ID);
NOT DB_LLLIB_Sorter_Temp_StringQueue(_SessionID, _OtherID, _Str);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
