Version 1
SubGoalCombiner SGC_AND
INITSECTION
//Settings
//DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn)
//DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
//DB_LLLIB_Traders_SpawnRequirement(_TraderID, _Level, _RequirementID)
//DB_LLLIB_Traders_StartingGold(_TraderID, _Level, _Amount, _RequirementID)
//DB_LLLIB_Traders_Dialog(_TraderID, _Level, _Dialog, _RequirementID)
//DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z)
//DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
//DB_LLLIB_Traders_LevelPositionObject(_TraderID, _Level, _Object)
//DB_LLLIB_Traders_CreationEvents(_TraderID, _EventName)
//DB_LLLIB_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID)

//Dynamic
//DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)

//Ref
//DB_LLLIB_Requirements_PartyLevel(_RequirementID, _MinLevel, _MaxLevel)
//DB_LLLIB_Requirements_Flag(_RequirementID, _Flag, _FlagType, _FlagVal)
//DB_LLLIB_Requirements_MaxItemAmount(_RequirementID, _MaxAmount)

//DB_LLLIB_Traders_Temp_DialogFound(_TraderID)
KBSECTION
//REGION REGISTERING
PROC
LLLIB_Trader_Register_Trader((STRING)_TraderID, (STRING)_Template)
AND
NOT DB_LLLIB_Traders_RegisteredTrader(_TraderID,_,_)
THEN
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, 0);

PROC
LLLIB_Trader_Register_Trader((STRING)_TraderID, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
DB_LLLIB_Traders_RegisteredTrader(_TraderID,_,_)
THEN
LeaderLog_Debug("[LLLIB:Trader][ERROR] Error adding trader with ID '", _TraderID, "': Trader already exists!");

PROC
LLLIB_Trader_Register_Trader((STRING)_TraderID, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
NOT DB_LLLIB_Traders_RegisteredTrader(_TraderID,_,_)
THEN
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn);

PROC
LLLIB_Trader_Register_GlobalTrader((STRING)_TraderID, (CHARACTERGUID)_Trader)
THEN
DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader);

PROC
LLLIB_Trader_Register_SpawnRequirement((STRING)_TraderID, (STRING)_Level)
THEN
LLLIB_Trader_Register_SpawnRequirement(_TraderID, _Level, "");

PROC
LLLIB_Trader_Register_SpawnRequirement((STRING)_TraderID, (STRING)_Level, (STRING)_Requirement)
AND
NOT DB_LLLIB_Traders_SpawnRequirement(_TraderID,_Level,_)
THEN
DB_LLLIB_Traders_SpawnRequirement(_TraderID, _Level, _Requirement);

PROC
LLLIB_Trader_Register_StartingGold((STRING)_TraderID, (STRING)_Level, (INTEGER)_Amount)
THEN
LLLIB_Trader_Register_StartingGold(_TraderID, _Level, _Amount, "");

PROC
LLLIB_Trader_Register_StartingGold((STRING)_TraderID, (STRING)_Level, (INTEGER)_Amount, (STRING)_Requirement)
THEN
DB_LLLIB_Traders_StartingGold(_TraderID, _Level, _Amount, _Requirement);

PROC
LLLIB_Trader_Register_Dialog((STRING)_TraderID, (STRING)_Dialog)
THEN
LLLIB_Trader_Register_Dialog(_TraderID, "", _Dialog, "");

PROC
LLLIB_Trader_Register_Dialog((STRING)_TraderID, (STRING)_Level, (STRING)_Dialog)
THEN
LLLIB_Trader_Register_Dialog(_TraderID, _Level, _Dialog, "");

PROC
LLLIB_Trader_Register_Dialog((STRING)_TraderID, (STRING)_Level, (STRING)_Dialog, (STRING)_RequirementID)
THEN
DB_LLLIB_Traders_Dialog(_TraderID, _Level, _Dialog, _RequirementID);

PROC
LLLIB_Trader_Register_Position((STRING)_TraderID, (STRING)_Level, (REAL)_x, (REAL)_y, (REAL)_z)
AND
NOT DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _,_,_)
THEN
DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z);

PROC
LLLIB_Trader_Register_PositionTrigger((STRING)_TraderID, (STRING)_Level, (TRIGGERGUID)_Trigger)
AND
NOT DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _)
THEN
DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger);

PROC
LLLIB_Trader_Register_PositionObject((STRING)_TraderID, (STRING)_Level, (GUIDSTRING)_Object)
AND
NOT DB_LLLIB_Traders_LevelPositionObject(_TraderID, _Level, _)
THEN
DB_LLLIB_Traders_LevelPositionObject(_TraderID, _Level, _Object);

PROC
LLLIB_Trader_Register_CreationEvent((STRING)_TraderID, (STRING)_EventName)
THEN
DB_LLLIB_Traders_CreationEvents(_TraderID, _EventName);

PROC
LLLIB_Trader_Register_Seat((STRING)_TraderID, (STRING)_Level, (ITEMGUID)_Seat)
THEN
LLLIB_Trader_Register_Seat(_TraderID, _Level, _Seat, "");

PROC
LLLIB_Trader_Register_Seat((STRING)_TraderID, (STRING)_Level, (ITEMGUID)_Seat, (STRING)_RequirementID)
THEN
DB_LLLIB_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID);
//END_REGION

//REGION CLEARING
PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_QRY_Traders_IsRegistered(_TraderID)
THEN
LeaderLog_Debug("[LLLIB:Traders] Trader [",_TraderID,"] removed from all associated databases.");

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn)
THEN
NOT DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn);

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_StartingGold(_TraderID, _Level, _Amount, _RequirementID)
THEN
NOT DB_LLLIB_Traders_StartingGold(_TraderID, _Level, _Amount, _RequirementID);

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
THEN
NOT DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader);

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_SpawnRequirement(_TraderID, _Level, _RequirementID)
THEN
NOT DB_LLLIB_Traders_SpawnRequirement(_TraderID, _Level, _RequirementID);

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_Dialog(_TraderID, _Level, _Dialog, _RequirementID)
THEN
NOT DB_LLLIB_Traders_Dialog(_TraderID, _Level, _Dialog, _RequirementID);

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z)
THEN
NOT DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z);

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_LevelPositionObject(_TraderID, _Level, _Object)
THEN
NOT DB_LLLIB_Traders_LevelPositionObject(_TraderID, _Level, _Object);

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
THEN
NOT DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger);

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_CreationEvents(_TraderID, _EventName)
THEN
NOT DB_LLLIB_Traders_CreationEvents(_TraderID, _EventName);

PROC
LLLIB_Trader_ClearTrader((STRING)_TraderID)
AND
DB_LLLIB_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID)
THEN
NOT DB_LLLIB_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID);
//END_REGION

//REGION QUERIES
QRY
LLLIB_QRY_Traders_HasPosition((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _PosX, _PosY, _PosZ)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Traders_HasPosition((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Traders_HasPosition((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_LevelPositionObject(_TraderID, _Level, _Object)
THEN
DB_NOOP(1);

QRY
DB_LLLIB_QRY_Traders_CantSit((STRING)_TraderID, (STRING)_Level)
AND
NOT DB_LLLIB_Traders_Seat(_TraderID, _Level, _, _)
THEN
DB_NOOP(1);

QRY
DB_LLLIB_QRY_Traders_CantSit((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID)
AND
ObjectExists(_Seat, 0)
THEN
DB_NOOP(1);

QRY
DB_LLLIB_QRY_Traders_CantSit((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID)
AND
ObjectExists(_Seat, 1)
AND
NOT LLLIB_QRY_Requirements_AllMet(_RequirementID)
THEN
DB_NOOP(1);

QRY
DB_LLLIB_QRY_Traders_IsRegistered((STRING)_TraderID)
AND
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn)
THEN
DB_NOOP(1);

QRY
DB_LLLIB_QRY_Traders_IsRegistered((STRING)_TraderID)
AND
DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
THEN
DB_NOOP(1);
//END_REGION

//REGION TRADER_PROCS
PROC
LLLIB_Traders_SetDialogToUnlocked((CHARACTERGUID)_Trader, (STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_Temp_DialogFound(_TraderID, _Dialog)
THEN
NOT DB_LLLIB_Traders_Temp_DialogFound(_TraderID, _Dialog);

PROC
LLLIB_Traders_SetDialogToUnlocked((CHARACTERGUID)_Trader, (STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_Dialog(_TraderID, _Level, _Dialog, _RequirementID)
AND
NOT DB_LLLIB_Traders_Temp_DialogFound(_TraderID, _)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
THEN
ProcRemoveAllDialogEntriesForSpeaker(_Trader);
DB_Dialogs(_Trader, _Dialog);
DB_LLLIB_Traders_Temp_DialogFound(_TraderID, _Dialog);

//Default to dialogs with no specific level in mind, if dialog not set.
PROC
LLLIB_Traders_SetDialogToUnlocked((CHARACTERGUID)_Trader, (STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_Dialog(_TraderID, "", _Dialog, _RequirementID)
AND
NOT DB_LLLIB_Traders_Temp_DialogFound(_TraderID,_)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
THEN
ProcRemoveAllDialogEntriesForSpeaker(_Trader);
DB_Dialogs(_Trader, _Dialog);
DB_LLLIB_Traders_Temp_DialogFound(_TraderID, _Dialog);

PROC
LLLIB_Traders_SetDialogToUnlocked((CHARACTERGUID)_Trader, (STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_Temp_DialogFound(_TraderID, _Dialog)
THEN
LeaderLog_Debug("[LLLIB:Traders] Dialog [",_Dialog,"] found and set for trader [",_TraderID,"].");
NOT DB_LLLIB_Traders_Temp_DialogFound(_TraderID, _Dialog);

PROC
LLLIB_Traders_SetDialog((CHARACTERGUID)_Trader, (STRING)_Dialog)
THEN
ProcRemoveAllDialogEntriesForSpeaker(_Trader);
DB_Dialogs(_Trader, _Dialog);

PROC
LLLIB_Traders_AddStartingGold((CHARACTERGUID)_Trader, (STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_StartingGold(_TraderID, _Level, _Amount, _RequirementID)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
THEN
CharacterAddGold(_Trader, _Amount);
//END_REGION

//REGION SPAWNING
PROC
LLLIB_Traders_CreateTraders((STRING)_Level)
AND
DB_LLLIB_Traders_SpawnRequirement(_TraderID, _Level, _RequirementID)
AND
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
AND
LLLIB_QRY_Traders_HasPosition(_TraderID, _Level)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
THEN
LLLIB_Traders_SpawnTrader(_TraderID, _Level, _Template, _PlaySpawn);

PROC
LLLIB_Traders_CreateTraders((STRING)_Level)
AND
DB_LLLIB_Traders_SpawnRequirement(_TraderID, _Level, _RequirementID)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
AND
DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
AND
ObjectExists(_Trader, 1)
AND
LLLIB_QRY_Traders_HasPosition(_TraderID, _Level)
AND
String(_Trader, _TraderStr)
THEN
LeaderLog_Debug("[LLLIB:Traders] Attempting to teleport global trader [",_TraderID,"]:[",_TraderStr,"].");
LLLIB_Traders_TeleportToPosition(_TraderID, _Level, _Trader);

PROC
LLLIB_Traders_CreateTrader((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_RegisteredTrader(_TraderID, _Template, _PlaySpawn)
AND
LLLIB_QRY_Traders_HasPosition(_TraderID, _Level)
THEN
LLLIB_Traders_SpawnTrader(_TraderID, _Level, _Template, _PlaySpawn);

PROC
LLLIB_Traders_CreateTrader((STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
AND
ObjectExists(_Trader, 1)
AND
LLLIB_QRY_Traders_HasPosition(_TraderID, _Level)
AND
String(_Trader, _TraderStr)
THEN
LeaderLog_Debug("[LLLIB:Traders] Attempting to teleport global trader [",_TraderID,"]:[",_TraderStr,"].");
SetOnStage(_Trader, 1);
LLLIB_Traders_TeleportToPosition(_TraderID, _Level, _Trader);

PROC
LLLIB_Traders_SpawnTrader((STRING)_TraderID, (STRING)_Level, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
AND
DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
AND
GetPosition(_Trigger,_x,_y,_z)
AND
CharacterCreateAtPosition(_x,_y,_z, _Template, _PlaySpawn, _Trader)
THEN
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);
SetStoryEvent(_Trader, "LLLIB_Events_TraderCreated");

PROC
LLLIB_Traders_SpawnTrader((STRING)_TraderID, (STRING)_Level, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
AND
DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z)
AND
CharacterCreateAtPosition(_x,_y,_z, _Template, _PlaySpawn, _Trader)
THEN
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);
SetStoryEvent(_Trader, "LLLIB_Events_TraderCreated");

PROC
LLLIB_Traders_SpawnTrader((STRING)_TraderID, (STRING)_Level, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
AND
DB_LLLIB_Traders_LevelPositionObject(_TraderID, _Level, _Object)
AND
GetPosition(_Object, _x, _y, _z)
AND
CharacterCreateAtPosition(_x,_y,_z, _Template, _PlaySpawn, _Trader)
THEN
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);
SetStoryEvent(_Trader, "LLLIB_Events_TraderCreated");

PROC
LLLIB_Traders_TeleportToPosition((STRING)_TraderID, (STRING)_Level, (CHARACTERGUID)_Trader)
AND
GetPosition(_Trader, _x,_y,_z)
AND
Integer(_x,_xint)
AND
Integer(_y,_yint)
AND
Integer(_z,_zint)
AND
IntegertoString(_xint, _xpos)
AND
IntegertoString(_yint, _ypos)
AND
IntegertoString(_zint, _zpos)
THEN
LeaderLog_Debug("[LLLIB:Traders] Global trader [",_TraderID,"] pre-tp position is ",_xpos,",",_ypos,",",_zpos);

PROC
LLLIB_Traders_TeleportToPosition((STRING)_TraderID, (STRING)_Level, (CHARACTERGUID)_Trader)
AND
NOT DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
AND
DB_LLLIB_Traders_LevelPositionObject(_TraderID, _Level, _Object)
THEN
DB_LLLIB_Debug_TraceEvent(_TraderID, "LLLIB_Events_TraderTeleported", "object");
TeleportTo(_Trader, _Object, "LLLIB_Events_TraderTeleported", 0);
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);

PROC
LLLIB_Traders_TeleportToPosition((STRING)_TraderID, (STRING)_Level, (CHARACTERGUID)_Trader)
AND
NOT DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
AND
DB_LLLIB_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
//AND
//GetPosition(_Trigger,_x,_y,_z)
THEN
DB_LLLIB_Debug_TraceEvent(_TraderID, "LLLIB_Events_TraderTeleported", "trigger");
TeleportTo(_Trader, _Trigger, "LLLIB_Events_TraderTeleported", 0);
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);

PROC
LLLIB_Traders_TeleportToPosition((STRING)_TraderID, (STRING)_Level, (CHARACTERGUID)_Trader)
AND
NOT DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
AND
DB_LLLIB_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z)
THEN
DB_LLLIB_Debug_TraceEvent(_TraderID, "LLLIB_Events_TraderTeleported", "position");
TeleportToPosition(_Trader, _x,_y,_z, "LLLIB_Events_TraderTeleported", 0);
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);

IF
StoryEvent((CHARACTERGUID)_Trader, "LLLIB_Events_TraderTeleported")
AND
DB_LLLIB_Debug_TraceEvent(_TraderID, "LLLIB_Events_TraderTeleported", _TypeStr)
AND
GetPosition(_Trader, _x,_y,_z)
AND
Integer(_x,_xint)
AND
Integer(_y,_yint)
AND
Integer(_z,_zint)
AND
IntegertoString(_xint, _xpos)
AND
IntegertoString(_yint, _ypos)
AND
IntegertoString(_zint, _zpos)
THEN
LeaderLog_Debug("[LLLIB:Traders] Global trader [",_TraderID,"] post-tp position is ",_xpos,",",_ypos,",",_zpos);

IF
StoryEvent((CHARACTERGUID)_Trader, "LLLIB_Events_TraderTeleported")
AND
DB_LLLIB_Debug_TraceEvent(_TraderID, "LLLIB_Events_TraderTeleported", _TypeStr)
THEN
LeaderLog_Debug("[LLLIB:Traders] Teleported global trader [",_TraderID,"] to ",_TypeStr,".");
NOT DB_LLLIB_Debug_TraceEvent(_TraderID, "LLLIB_Events_TraderTeleported", _TypeStr);

/*
IF
StoryEvent((CHARACTERGUID)_Trader, "LLLIB_Events_TraderTeleported")
AND
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
AND
DB_LLLIB_Traders_CreationEvents(_TraderID, _EventName)
THEN
SetStoryEvent(_Trader, _EventName);
*/

IF
StoryEvent((CHARACTERGUID)_Trader, "LLLIB_Events_TraderCreated")
AND
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
THEN
SetStoryEvent(_Trader, "LLLIB_Events_TraderReadyToSit");

IF
StoryEvent((CHARACTERGUID)_Trader, "LLLIB_Events_TraderTeleported")
AND
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
THEN
SetStoryEvent(_Trader, "LLLIB_Events_TraderReadyToSit");
//END_REGION

//REGION ON_SPAWN
//Creation events
IF
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
AND
DB_LLLIB_Traders_CreationEvents(_TraderID, _EventName)
THEN
SetStoryEvent(_Trader, _EventName);

IF
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
THEN
LLLIB_Traders_SetDialogToUnlocked(_Trader, _TraderID, _Level);
LLLIB_Traders_AddStartingGold(_Trader, _TraderID, _Level);

//Generate treasure on spawn
IF
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
THEN
//ItemTemplateAddTo("LLLIB_Dummy_InventoryInit_a76d007d-48d7-4aa6-b741-7b9fcd125de3", _Trader, 1);
SetVisible(_Trader, 1);
SetOnStage(_Trader, 1);
SetStoryEvent(_Trader, "LLLIB_Treasure_GenerateNow");

IF
ItemAddedToCharacter(_Item, _Trader)
AND
GetTemplate(_Item, "LLLIB_Dummy_InventoryInit_a76d007d-48d7-4aa6-b741-7b9fcd125de3")
THEN
ItemDestroy(_Item);
//END_REGION

//REGION SITTING
IF
StoryEvent((CHARACTERGUID)_Trader, "LLLIB_Events_TraderReadyToSit")
AND
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
THEN
LLLIB_Traders_SetSeat(_Trader, _TraderID, _Level);

PROC
LLLIB_Traders_SetSeat((CHARACTERGUID)_Trader, (STRING)_TraderID, (STRING)_Level)
AND
DB_LLLIB_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID)
AND
ObjectExists(_Seat, 1)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
THEN
SetVarObject(_Trader, "Seat", _Seat);
CharacterUseItem(_Trader, _Seat, "");
LeaderLog_Debug("[LLLIB:DynamicTraders] Set seat value on trader ", _TraderID);

PROC
LLLIB_Traders_SetSeat((CHARACTERGUID)_Trader, (STRING)_TraderID, (STRING)_Level)
AND
NOT DB_LLLIB_Traders_CantSit(_TraderID, _Level)
THEN
ClearVarObject(_Trader, "Seat");
//END_REGION

//REGION REQUIREMENTS
PROC
LLLIB_Requirements_RequirementUnlocked((STRING)_RequirementID)
THEN
LLLIB_Traders_SpawnIfRequirementsMet(_RequirementID);

PROC
LLLIB_Requirements_RequirementUnlocked((STRING)_RequirementID)
AND
DB_LLLIB_Traders_Dialog(_TraderID, _Level, _Dialog, _RequirementID)
AND
DB_CurrentLevel(_Level)
AND
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
THEN
LLLIB_Traders_SetDialog(_Trader, _Dialog);

PROC
LLLIB_Requirements_RequirementLocked((STRING)_RequirementID)
AND
DB_LLLIB_Traders_Dialog(_TraderID, _Level, _Dialog, _RequirementID)
AND
DB_CurrentLevel(_Level)
AND
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
THEN
LeaderLog_Debug("[LLLIB:Requirements] Requirement[",_RequirementID,"] locked.");

PROC
LLLIB_Traders_SpawnIfRequirementsMet((STRING)_RequirementID)
AND
DB_CurrentLevel(_Level)
AND
DB_LLLIB_Traders_SpawnRequirement(_TraderID, _Level, _RequirementID)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
AND
NOT DB_LLLIB_Traders_Spawned(_, _TraderID, _Level)
THEN
LLLIB_Traders_CreateTrader(_TraderID, _Level);
//END_REGION

//REGION SPAWN_TRIGGER
IF
GameStarted(_,_)
THEN
LeaderLog_Debug("[LLLIB:Traders] Starting create traders timer. ");
TimerLaunch("LLLIB_Timers_CreateTraders", 1000);

IF
TimerFinished("LLLIB_Timers_CreateTraders")
AND
DB_CurrentLevel(_Level)
THEN
LeaderLog_Debug("[LLLIB:Traders] Creating traders for level ",_Level);
LLLIB_Traders_CreateTraders(_Level);

IF
RegionEnded(_Level)
AND
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
AND
DB_LLLIB_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
THEN
NOT DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level);
LeaderLog_Debug("[LLLIB:Traders] Level ",_Level," ending. Removed global trader [",_TraderID,"] from spawned database.");
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
