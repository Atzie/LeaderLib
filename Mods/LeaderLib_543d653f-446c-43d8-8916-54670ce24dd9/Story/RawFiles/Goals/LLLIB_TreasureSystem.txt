Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
//DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)

//DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
//DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
//DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel)
//DB_LLLIB_Treasure_ItemDeltaMods(_TreasureID, _ItemEntry, _Deltamod, _Chance)
//DB_LLLIB_Treasure_ItemRunes(_TreasureID, _ItemEntry, _Rune, _Chance)

//DB_LLLIB_Treasure_Requirement_Level(_RequirementID, _MinLevel, _MaxLevel)
//DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, _FlagVal)
//DB_LLLIB_Treasure_Requirement_Amount(_RequirementID, _MaxAmount)

//DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent)
//DB_LLLIB_Treasure_GeneratedEvent(_TreasureID, _ItemEntry, _OnGeneratedEvent)

//DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate)
//DB_LLLIB_Treasure_Temp_MatchedTreasure(_Trader, _TreasureID)
//DB_LLLIB_Treasure_Temp_ActiveTraderDialog(_Trader, _Instance)
//DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemTemplate, _Amount)
//DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemStat, _ItemTemplate, _Amount, _RequirementID)
KBSECTION
//REGION REGISTERING
PROC
LLLIB_Treasure_RegisterObject((STRING)_TreasureID, (GUIDSTRING)_Object)
AND
NOT DB_LLLIB_Treasure_RegisteredObject(_TreasureID,_)
THEN
DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object);

PROC
LLLIB_Treasure_RegisterObjectByTemplate((STRING)_TreasureID, (STRING)_ObjectTemplate)
AND
NOT DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID,_)
THEN
DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _ObjectTemplate);

PROC
LLLIB_Treasure_AddFlagRequirement((STRING)_RequirementID, (STRING)_Flag, (STRING)_FlagType)
AND
_RequirementID != ""
THEN
DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, 1);

PROC
LLLIB_Treasure_AddFlagRequirement((STRING)_RequirementID, (STRING)_Flag, (STRING)_FlagType, (INTEGER)_FlagVal)
AND
_RequirementID != ""
THEN
DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, _FlagVal);

PROC
LLLIB_Treasure_AddLevelRequirement((STRING)_RequirementID, (INTEGER)_MinLevel, (INTEGER)_MaxLevel)
AND
_RequirementID != ""
THEN
DB_LLLIB_Treasure_Requirement_Level(_RequirementID, _MinLevel, _MaxLevel);

PROC
LLLIB_Treasure_AddMaxAmountRequirement((STRING)_RequirementID, (INTEGER)_MaxAmount)
AND
_RequirementID != ""
THEN
DB_LLLIB_Treasure_Requirement_Amount(_RequirementID, _MaxAmount);

PROC
LLLIB_Treasure_AddTreasureItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount)
THEN
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, "");

PROC
LLLIB_Treasure_AddTreasureItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID)
THEN
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LLLIB_Treasure_AddTreasureItemStat((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount)
THEN
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, "");

PROC
LLLIB_Treasure_AddTreasureItemStat((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID)
THEN
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LLLIB_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_UsePartyLevel)
THEN
LLLIB_Treasure_Configure_ItemLevel(_TreasureID, _ItemEntry, -1, -1, _UsePartyLevel);

PROC
LLLIB_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_MinLevel, (INTEGER)_MaxLevel)
THEN
LLLIB_Treasure_Configure_ItemLevel(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, 0);

PROC
LLLIB_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_MinLevel, (INTEGER)_MaxLevel, (INTEGER)_UsePartyLevel)
AND
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _PrevMin, _PrevMax, _PrevVal)
THEN
NOT DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _PrevMin, _PrevMax, _PrevVal);
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel);
LeaderLog_DebugLog("[LLLIB:TreasureSystem] Previous settings for ",_TreasureID,":",_ItemEntry," were overwritten.");

PROC
LLLIB_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_MinLevel, (INTEGER)_MaxLevel, (INTEGER)_UsePartyLevel)
AND
NOT DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry,_,_,_)
THEN
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel);

PROC
LLLIB_Treasure_Configure_AddDeltaMod((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Deltamod, (INTEGER)_Chance)
THEN
DB_LLLIB_Treasure_ItemDeltaMods(_TreasureID, _ItemEntry, _Deltamod, _Chance);

PROC
LLLIB_Treasure_Configure_AddRune((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Rune, (INTEGER)_Chance)
THEN
DB_LLLIB_Treasure_ItemRunes(_TreasureID, _ItemEntry, _Rune, _Chance);

PROC
LLLIB_Treasure_AddGenerationEvent((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_OnGeneratedEvent)
THEN
DB_LLLIB_Treasure_GeneratedEvent(_TreasureID, _ItemEntry, _OnGeneratedEvent);

PROC
LLLIB_Treasure_GenerateOnce((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_OnCompletionEvent)
THEN
DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent);
//END_REGION

//REGION QUERIES_CHECKS
//Don't bother checking requirements without an actual ID
QRY
LLLIB_QRY_Treasure_CanGenerate("")
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanGenerate((STRING)_RequirementID)
AND
_RequirementID != ""
AND
NOT DB_LLLIB_Treasure_Requirement_Level(_RequirementID,_,_)
AND
NOT DB_LLLIB_Treasure_Requirement_Flag(_RequirementID,_,_,_)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanGenerate((STRING)_RequirementID)
AND
_RequirementID != ""
AND
NOT DB_LLLIB_Treasure_Requirement_Level(_RequirementID,_,_)
AND
DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, _FlagVal)
AND
LLLIB_Helper_QRY_PartyFlagSet(_Flag, _FlagType, _FlagVal)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanGenerate((STRING)_RequirementID)
AND
_RequirementID != ""
AND
NOT DB_LLLIB_Treasure_Requirement_Flag(_RequirementID,_,_,_)
AND
DB_LLLIB_Treasure_Requirement_Level(_RequirementID, _MinLevel, _MaxLevel)
AND
LLLIB_Helper_QRY_PartyLevelRangeMet(_MinLevel, _MaxLevel)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanGenerate((STRING)_RequirementID)
AND
DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, _FlagVal)
AND
LLLIB_Helper_QRY_PartyFlagSet(_Flag, _FlagType, _FlagVal)
AND
DB_LLLIB_Treasure_Requirement_Level(_RequirementID, _MinLevel, _MaxLevel)
AND
LLLIB_Helper_QRY_PartyLevelRangeMet(_MinLevel, _MaxLevel)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_IsRegisteredObject((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_IsRegisteredObject((GUIDSTRING)_Object)
AND
NOT DB_LLLIB_Treasure_RegisteredObject(_, _Object)
AND
GetTemplate(_Object, _Template)
AND
DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object,_)
AND
DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object,_)
AND
GetTemplate(_Object, _Template)
AND
DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure((GUIDSTRING)_Object, _TreasureID);
//END_REGION

//REGION ITEM_LIMITS
QRY
LLLIB_QRY_Treasure_CanCheckRequirements((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_RequirementID, (INTEGER)_GeneratedAmount)
AND
IsTagged(_Object, "LLLIB_Treasure_GenerateEndlessly", 1)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanCheckRequirements((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_RequirementID, (INTEGER)_GeneratedAmount)
AND
IsTagged(_Object, "LLLIB_Treasure_GenerateEndlessly", 0)
AND
_RequirementID != ""
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanCheckRequirements((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_RequirementID, (INTEGER)_GeneratedAmount)
AND
IsTagged(_Object, "LLLIB_Treasure_GenerateEndlessly", 0)
AND
_RequirementID == ""
AND
DB_LLLIB_Treasure_Requirement_Amount(_RequirementID,_)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_ItemLimitNotMet((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_RequirementID, (INTEGER)_GeneratedAmount)
AND
DB_LLLIB_Treasure_Requirement_Amount(_RequirementID, _MaxAmount)
AND
LLLIB_QRY_Treasure_GetItemCount(_Object, _ItemEntry, _IsStat)
AND
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _Amount)
AND
_Amount < _MaxAmount
THEN
NOT DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _Amount);

QRY
LLLIB_QRY_Treasure_ItemLimitNotMet((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_RequirementID, (INTEGER)_GeneratedAmount)
AND
_RequirementID == ""
AND
DB_LLLIB_Treasure_Requirement_Amount(_RequirementID,_)
AND
LLLIB_QRY_Treasure_GetItemCount(_Object, _ItemEntry, _IsStat)
AND
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _Amount)
AND
_Amount < _GeneratedAmount
THEN
NOT DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _Amount);

QRY
LLLIB_QRY_Treasure_ItemLimitNotMet((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_RequirementID, (INTEGER)_GeneratedAmount), (INTEGER)_IsStat)
AND
IsTagged(_Object, "LLLIB_Treasure_GenerateEndlessly", 0)
AND
_RequirementID == ""
AND
NOT DB_LLLIB_Treasure_Requirement_Amount(_RequirementID,_)
AND
LLLIB_QRY_Treasure_GetItemCount(_Object, _ItemEntry, _IsStat)
AND
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _Amount)
AND
_Amount < _GeneratedAmount
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_GetItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, 0)
AND
ObjectIsCharacter(_Object, 1)
AND
CharacterGetItemTemplateCount((CHARACTERGUID)_Object, _ItemEntry, _Amount)
THEN
DB_LLLIB_Treasure_Temp_ItemCount((GUIDSTRING)_Object, _ItemEntry, _Amount);

QRY
LLLIB_QRY_Treasure_GetItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, 0)
AND
ObjectIsItem(_Object, 1)
AND
NOT DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _)
AND
ItemIsContainer((ITEMGUID)_Object, 1)
AND
ItemTemplateIsInContainer((ITEMGUID)_Object, _ItemEntry, _Amount)
THEN
DB_LLLIB_Treasure_Temp_ItemCount((GUIDSTRING)_Object, _ItemEntry, _Amount);

//For counting stat-based treasure
PROC
LLLIB_Treasure_Internal_AddToItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, (INTEGER)_Amount)
AND
NOT DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _)
THEN
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, 0);

PROC
LLLIB_Treasure_Internal_AddToItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, (INTEGER)_Amount)
AND
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _CurrentAmount)
AND
IntegerSum(_CurrentAmount, _Amount, _NextAmount)
THEN
NOT DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _CurrentAmount);
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _NextAmount);

QRY
LLLIB_QRY_Treasure_GetItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, 1) // Is Stat
AND
ObjectIsCharacter(_Object, 1)
AND
DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate)
AND
//CharacterGetItemTemplateCount((CHARACTERGUID)_Object, _ItemTemplate, _Amount)
GetItemForItemTemplateInInventory(_Character, _ItemTemplate, _Item)
AND
GetStatString(_Item, _ItemEntry)
AND
ItemGetAmount(_Item, _Amount)
THEN
LLLIB_Treasure_Internal_AddToItemCount((GUIDSTRING)_Object, _ItemEntry, _Amount);

QRY
LLLIB_QRY_Treasure_GetItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, 1)
AND
ObjectIsItem(_Object, 1)
AND
DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate)
AND
ItemIsContainer((ITEMGUID)_Object, 1)
THEN
LeaderLog_DebugLog("[LLLIB:Treasure][ERROR] Trying to count template[",_ItemTemplate,"] with specific stat[",_ItemEntry,"] in container! Use the iterator instead.");
/*
QRY
LLLIB_QRY_Treasure_GetItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, 1)
AND
ObjectIsItem(_Object, 1)
AND
DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate)
AND
ItemIsContainer((ITEMGUID)_Object, 1)
AND
ItemTemplateIsInContainer((ITEMGUID)_Object, _ItemTemplate, _Amount)
AND
GetStatString(_Item, _ItemEntry)
AND
ItemGetAmount(_Item, _Amount)
THEN
LLLIB_Treasure_Internal_AddToItemCount((GUIDSTRING)_Object, _ItemEntry, _Amount);
*/

QRY
LLLIB_QRY_Treasure_GetItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, 1)
AND
NOT DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _)
THEN
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, 0);
//END_REGION

//REGION GENERATING
PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
LLLIB_QRY_Treasure_CanGenerate(_RequirementID)
AND
LLLIB_QRY_Treasure_ItemLimitNotMet(_Object, _ItemEntry, _RequirementID, _Amount, 0)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_JustGenerated", 0);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _Amount, 0);

PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
LLLIB_QRY_Treasure_CanGenerate(_RequirementID)
AND
DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate)
THEN
DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemStat, _ItemTemplate, _Amount, _RequirementID);
InventoryLaunchTemplateIterator(_Object, _ItemTemplate, "LLLIB_Events_Treasure_CountTemplate", "LLLIB_Events_Treasure_CountComplete");

IF
StoryEvent(_Item, "LLLIB_Events_Treasure_CountTemplate")
AND
GetTemplate(_Item, _ItemTemplate)
AND
GetStatString(_Item, _ItemStat)
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemStat, _ItemTemplate, _Amount, _RequirementID)
THEN
LLLIB_Treasure_Internal_AddToItemCount(_Item, _ItemEntry, _Amount);

IF
StoryEvent(_Item, "LLLIB_Events_Treasure_CountComplete")
AND
GetTemplate(_Item, _ItemTemplate)
AND
GetStatString(_Item, _ItemStat)
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemStat, _ItemTemplate, _Amount, _RequirementID)
AND

THEN
LLLIB_Treasure_Internal_AddToItemCount(_Item, _ItemEntry, _Amount);

PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
LLLIB_QRY_Treasure_CanGenerate(_RequirementID)
AND
NOT DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _)
AND
LLLIB_QRY_Treasure_ItemLimitNotMet(_Object, _ItemEntry, _RequirementID, _Amount, 1)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_JustGenerated", 0);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _Amount, 1);

IF
DB_LLLIB_Treasure_Temp_GenerateItem((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, 0)
AND
_CreatedAmount < _MaxAmount
AND
IntegerSum(_CreatedAmount, 1, _NextAmount)
THEN
ItemTemplateAddTo(_ItemEntry, _Object, 1);
NOT DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _NextAmount, _MaxAmount);

IF
DB_LLLIB_Treasure_Temp_GenerateItem((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, 0)
AND
_CreatedAmount < _MaxAmount
AND
IntegerSum(_CreatedAmount, 1, _NextAmount)
THEN
SetVarString(_Object, "LLLIB_Treasure_ItemStat");
StoryEvent(_Object, "LLLIB_Treasure_GenerateByStat");
NOT DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _NextAmount, _MaxAmount);

IF
DB_LLLIB_Treasure_Temp_GenerateItem((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
AND
_CreatedAmount >= _MaxAmount
AND
GetUUID(_Object, _ID)
AND
StringConcatenate("LLLIB_Treasure_ResetJustGeneratedFlagTimer_", _ID, _TimerName)
AND
NOT DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName)
THEN
NOT DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount);
LLLIB_Treasure_SendGeneratedEvent(_Object, _TreasureID, _ItemEntry);
LLLIB_Treasure_RemoveIfOnlyOnce(_Object, _TreasureID, _ItemEntry);
DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName);
TimerLaunch(_TimerName, 100);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName)
THEN
ObjectClearFlag(_Object, "LLLIB_Treasure_JustGenerated");
NOT DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName);

IF
ItemAddedToCharacter(_Item, _Object)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_OnAdded(_Object, _Item, _TreasureID);

IF
ItemAddedToContainer(_Item, _Object)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_OnAdded(_Object, _Item, _TreasureID);

PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item, (STRING)_TreasureID)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_JustGenerated", 1)
AND
GetTemplate(_Item, _ItemEntry)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
LLLIB_Treasure_AdjustItemLevel(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_ApplyDeltaMods(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_InsertRunes(_Item, _TreasureID, _ItemEntry, 0);
LeaderLog_DebugLog("[LLLIB:TreasureSystem] Adjusted treasure level, delta mods, and runes.");

PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item, (STRING)_TreasureID)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_JustGenerated", 1)
AND
GetStatString(_Item, _ItemEntry)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
GetTemplate(_Item, _ItemTemplate)
THEN
//Link the stat to the template for easier amount retrieval later, hopefully.
DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate);
LLLIB_Treasure_AdjustItemLevel(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_ApplyDeltaMods(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_InsertRunes(_Item, _TreasureID, _ItemEntry, 0);
LeaderLog_DebugLog("[LLLIB:TreasureSystem] Adjusted treasure level, delta mods, and runes.");

/*
PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_JustGenerated", 1)
THEN
LeaderLog_DebugLog("[LLLIB:TreasureSystem] Treasure added.");
*/

PROC
LLLIB_Treasure_SendGeneratedEvent((GUIDSTRING)_Owner, (STRING)_OwnerID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_GeneratedEvent(_OwnerID, _ItemEntry, _OnGeneratedEvent)
THEN
SetStoryEvent(_Owner, _OnGeneratedEvent);

PROC
LLLIB_Treasure_RemoveIfOnlyOnce((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
NOT DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LLLIB_Treasure_RemoveIfOnlyOnce((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_GenerationEnded");
SetStoryEvent(_Object, _OnCompletionEvent);

PROC
LLLIB_Treasure_DisableGenerationForObject((GUIDSTRING)_Object)
AND
IsTagged(_Object, "LLLIB_Treasure_GenerateEndlessly", 0)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_GenerationEnded");

IF
ObjectWasTagged(_Object, "LLLIB_Treasure_GenerateEndlessly")
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 1)
THEN
ObjectClearFlag(_Object, "LLLIB_Treasure_GenerationEnded");
//END_REGION

//REGION ITEM_GENERATION_POST_CREATION
PROC
LLLIB_Treasure_AdjustItemLevel((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel)
AND
_UsePartyLevel > 0
AND
LLLIB_Helper_QRY_GetHighestLevelInParty()
AND
DB_LLLIB_Helper_Temp_HighestLevelInParty(_Level)
THEN
ItemLevelUpTo(_Item, _Level);

PROC
LLLIB_Treasure_AdjustItemLevel((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel)
AND
_UsePartyLevel <= 0
AND
LLLIB_Random(_MinLevel, _MaxLevel)
AND
DB_LLLIB_Temp_RandomResult(_Level)
THEN
ItemLevelUpTo(_Item, _Level);
NOT DB_LLLIB_Temp_RandomResult(_Level);

PROC
LLLIB_Treasure_ApplyDeltaMods((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemDeltaMods(_TreasureID, _ItemEntry, _Deltamod, _Chance)
AND
ItemHasDeltaModifier(_Item, _Deltamod, 0)
AND
LLLIB_Random(100)
AND
DB_LLLIB_Temp_RandomResult(_Roll)
AND
_Roll <= _Chance
THEN
ItemAddDeltaModifier(_Item, _Deltamod);
NOT DB_LLLIB_Temp_RandomResult(_Roll);

PROC
LLLIB_Treasure_InsertRunes((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
NOT DB_LLLIB_Treaasure_Temp_RuneSlot(_Item,_)
THEN
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, 0);

PROC
LLLIB_Treasure_InsertRunes((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemRunes(_TreasureID, _ItemEntry, _Rune, _Chance)
AND
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot)
AND
LLLIB_Treasure_QRY_InsertRuneInSlot(_Item, _Rune, _Slot, _Chance)
AND
IntegerSum(_Slot, 1, _NextSlot)
THEN
NOT DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot);
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _NextSlot);

QRY
LLLIB_Treasure_QRY_InsertRuneInSlot((ITEMGUID)_Item, (STRING)_Rune, (INTEGER)_Slot, (INTEGER)_Chance)
AND
ItemGetRuneItemTemplate(_Item, _Slot, _CurrentRune)
AND
_CurrentRune != _Rune
AND
LLLIB_Random(100)
AND
DB_LLLIB_Temp_RandomResult(_Roll)
AND
_Roll <= _Chance
AND
IntegerSum(_CurrentSlot, 1, _NextSlot)
THEN
ItemInsertRune(NULL_00000000-0000-0000-0000-000000000000, _Item, _Rune, _Slot);
NOT DB_LLLIB_Temp_RandomResult(_Roll);

PROC
LLLIB_Treasure_InsertRunes((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot)
THEN
NOT DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot);
//END_REGION

//REGION TREASURE_EVENTS
IF
//ItemOpened(_Object)
CharacterUsedItem(_, _Object)
AND
IsTagged(_Object, "LLLIB_Item_IgnoreOpened", 0)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 0)
AND
ItemIsContainer(_Object, 1)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);
LLLIB_Treasure_DisableGenerationForObject(_Object);

IF
ObjectFlagSet("LLLIB_Treasure_GenerateNow", _Object, _)
AND
LLLIB_Helper_QRY_ClearObjectFlag(_Object, "LLLIB_Treasure_GenerateNow")
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);
//END_REGION

//REGION GENERATION_EVENTS
IF
StoryEvent(_Object, "LLLIB_GenerateTreasure")
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 0)
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
TradeGenerationEnded(_Object)
AND
IsTagged(_Object, "LLLIB_Trader_IgnoreTradeGeneration", 0)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 0)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
DialogStarted(_Dialog, _Instance)
AND
DialogGetInvolvedNPC(_Instance, 1, _Object)
AND
IsTagged(_Object, "LLLIB_Trader_GenerateOnDialog", 1)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 0)
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
ObjectFlagSet("LLLIB_Trader_OpenTrade", (CHARACTERGUID)_Object, _Instance)
AND
LLLIB_Helper_QRY_ClearObjectFlag(_Object, "LLLIB_Treasure_OpenTrade")
AND
DialogGetInvolvedPlayer(_Instance, 1, (CHARACTERGUID)_Player)
THEN
StartTrade(_Player, _Object);
//END_REGION

//REGION LEADER_TRADER
IF
DialogStarted("LLLIB_Trader", _Instance)
AND
DialogGetInvolvedNPC(_Instance, 1, _Object)
THEN
DB_LLLIB_Treasure_Temp_ActiveTraderDialog(_Object, _Instance);

IF
DialogStarted("LLLIB_Trader", _Instance)
AND
DialogGetInvolvedPlayer(_Instance, 1, _Player)
AND
ObjectGetFlag(_Player, "LLLIB_Treasure_PlayerTalkedToLeaderTrader", 1)
THEN
DialogSetVariableStringForInstance(_Instance, "LLLIB_Treasure_Greeting_f143b90b-9afc-477e-b133-6a1574341261", "Welcome back! Looking to trade?");

IF
DialogEnded("LLLIB_Trader", _Instance)
AND
DB_LLLIB_Treasure_Temp_ActiveTraderDialog(_Object, _Instance)
THEN
NOT DB_LLLIB_Treasure_Temp_ActiveTraderDialog(_Object, _Instance);

IF
ObjectFlagSet("StartTrade", _Speaker, _Instance)
AND
DB_LLLIB_Treasure_Temp_ActiveTraderDialog(_Object, _Instance)
THEN
DialogSetVariableStringForInstance(_Instance, "LLLIB_Treasure_Greeting_f143b90b-9afc-477e-b133-6a1574341261", "Anything else?");

IF
RequestTrade(_Player, _Object)
AND
DB_LLLIB_Treasure_Temp_ActiveTraderDialog(_Object, _Instance)
THEN
DialogSetVariableStringForInstance(_Instance, "LLLIB_Treasure_Greeting_f143b90b-9afc-477e-b133-6a1574341261", "Anything else?");
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
