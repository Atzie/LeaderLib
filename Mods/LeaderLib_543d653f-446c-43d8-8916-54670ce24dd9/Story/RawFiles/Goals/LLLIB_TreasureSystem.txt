Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
//DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
//DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)

//DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
//DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
//DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel)
//DB_LLLIB_Treasure_ItemDeltaMods(_TreasureID, _ItemEntry, _Deltamod, _Chance)
//DB_LLLIB_Treasure_ItemRunes(_TreasureID, _ItemEntry, _Rune, _Chance)

//DB_LLLIB_Treasure_Requirement_Level(_RequirementID, _MinLevel, _MaxLevel)
//DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, _FlagVal)
//DB_LLLIB_Treasure_Requirement_Amount(_RequirementID, _MaxAmount)

//DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntryOrTreasureTable, _OnCompletionEvent)
//DB_LLLIB_Treasure_GeneratedEvent(_TreasureID, _ItemEntry, _OnGeneratedEvent)

//DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate)
//DB_LLLIB_Treasure_GeneratorDummies(_Dummy)
//DB_LLLIB_Treasure_Temp_DummyTarget(_Object, _Dummy, _ItemEntry, _TreasureID)

//DB_LLLIB_Treasure_Temp_MatchedTreasure(_Trader, _TreasureID)
//DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemTemplate, _Amount)
//DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate)
//DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CurrentAmount, _MaxAmount, _IsStat)
//DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemStat, _ItemTemplate, _Amount, _RequirementID)
//DB_LLLIB_Treasure_Temp_Queue_GenerateTemplateItem(_Object, _TreasureID, _ItemTemplate, _GeneratedAmount, _RequirementID)
//DB_Teasure_Temp_ClearQueueTimer(_Object, _TreasureID, _ItemEntry, _TimerName)
KBSECTION
//REGION REGISTERING
PROC
LLLIB_Treasure_RegisterObject((STRING)_TreasureID, (GUIDSTRING)_Object)
THEN
DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object);

PROC
LLLIB_Treasure_RegisterObjectByTemplate((STRING)_TreasureID, (STRING)_ObjectTemplate)
THEN
DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _ObjectTemplate);

PROC
LLLIB_Treasure_RegisterTreasureTable((STRING)_TreasureID, (STRING)_TreaseTable, (STRING)_RequirementID)
THEN
DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreaseTable, _RequirementID,1,1,1);

PROC
LLLIB_Treasure_RegisterTreasureTable((STRING)_TreasureID, (STRING)_TreaseTable, (STRING)_RequirementID, (INTEGER)_UsePartyLevel)
THEN
DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreaseTable, _RequirementID, _UsePartyLevel, 1, 1);

PROC
LLLIB_Treasure_RegisterTreasureTable((STRING)_TreasureID, (STRING)_TreaseTable, (STRING)_RequirementID, (INTEGER)_UsePartyLevel, (INTEGER)_Level)
THEN
DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreaseTable, _RequirementID, _UsePartyLevel, _Level, _Level);

PROC
LLLIB_Treasure_RegisterTreasureTable((STRING)_TreasureID, (STRING)_TreaseTable, (STRING)_RequirementID, (INTEGER)_UsePartyLevel, (INTEGER)_MinLevel, (INTEGER)_MaxLevel)
THEN
DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreaseTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel);

PROC
LLLIB_Treasure_AddFlagRequirement((STRING)_RequirementID, (STRING)_Flag, (STRING)_FlagType)
AND
_RequirementID != ""
THEN
DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, 1);

PROC
LLLIB_Treasure_AddFlagRequirement((STRING)_RequirementID, (STRING)_Flag, (STRING)_FlagType, (INTEGER)_FlagVal)
AND
_RequirementID != ""
THEN
DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, _FlagVal);

PROC
LLLIB_Treasure_AddLevelRequirement((STRING)_RequirementID, (INTEGER)_MinLevel, (INTEGER)_MaxLevel)
AND
_RequirementID != ""
THEN
DB_LLLIB_Treasure_Requirement_Level(_RequirementID, _MinLevel, _MaxLevel);

PROC
LLLIB_Treasure_AddMaxAmountRequirement((STRING)_RequirementID, (INTEGER)_MaxAmount)
AND
_RequirementID != ""
THEN
DB_LLLIB_Treasure_Requirement_Amount(_RequirementID, _MaxAmount);

PROC
LLLIB_Treasure_AddTreasureItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount)
THEN
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, "");

PROC
LLLIB_Treasure_AddTreasureItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID)
THEN
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LLLIB_Treasure_AddTreasureItemStat((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount)
THEN
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, "");

PROC
LLLIB_Treasure_AddTreasureItemStat((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID)
THEN
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LLLIB_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_UsePartyLevel)
THEN
LLLIB_Treasure_Configure_ItemLevel(_TreasureID, _ItemEntry, _UsePartyLevel, 1, 1);

PROC
LLLIB_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_UsePartyLevel, (INTEGER)_Level)
THEN
LLLIB_Treasure_Configure_ItemLevel(_TreasureID, _ItemEntry, _UsePartyLevel, _Level, _Level);

PROC
LLLIB_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_UsePartyLevel, (INTEGER)_MinLevel, (INTEGER)_MaxLevel)
AND
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _PrevVal, _PrevMin, _PrevMax)
THEN
NOT DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _PrevVal, _PrevMin, _PrevMax);
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _UsePartyLevel, _MinLevel, _MaxLevel);
//LeaderLog_DebugLog("[LLLIB:TreasureSystem] Previous settings for ",_TreasureID,":",_ItemEntry," were overwritten.");

PROC
LLLIB_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_UsePartyLevel, (INTEGER)_MinLevel, (INTEGER)_MaxLevel)
AND
NOT DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry,_,_,_)
THEN
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _UsePartyLevel, _MinLevel, _MaxLevel);

PROC
LLLIB_Treasure_Configure_AddDeltaMod((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Deltamod, (INTEGER)_Chance)
THEN
DB_LLLIB_Treasure_ItemDeltaMods(_TreasureID, _ItemEntry, _Deltamod, _Chance);

PROC
LLLIB_Treasure_Configure_AddRune((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Rune, (INTEGER)_Chance)
THEN
DB_LLLIB_Treasure_ItemRunes(_TreasureID, _ItemEntry, _Rune, _Chance);

PROC
LLLIB_Treasure_AddGenerationEvent((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_OnGeneratedEvent)
THEN
DB_LLLIB_Treasure_GeneratedEvent(_TreasureID, _ItemEntry, _OnGeneratedEvent);

PROC
LLLIB_Treasure_GenerateOnce((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_OnCompletionEvent)
THEN
DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent);
//END_REGION

//REGION QUERIES_CHECKS
//Don't bother checking requirements without an actual ID
QRY
LLLIB_QRY_Treasure_CanGenerate((STRING)_RequirementID)
AND
_RequirementID == ""
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanGenerate((STRING)_RequirementID)
AND
_RequirementID != ""
AND
NOT DB_LLLIB_Treasure_Requirement_Level(_RequirementID,_,_)
AND
NOT DB_LLLIB_Treasure_Requirement_Flag(_RequirementID,_,_,_)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanGenerate((STRING)_RequirementID)
AND
_RequirementID != ""
AND
NOT DB_LLLIB_Treasure_Requirement_Level(_RequirementID,_,_)
AND
DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, _FlagVal)
AND
LLLIB_Helper_QRY_PartyFlagSet(_Flag, _FlagType, _FlagVal)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanGenerate((STRING)_RequirementID)
AND
_RequirementID != ""
AND
NOT DB_LLLIB_Treasure_Requirement_Flag(_RequirementID,_,_,_)
AND
DB_LLLIB_Treasure_Requirement_Level(_RequirementID, _MinLevel, _MaxLevel)
AND
LLLIB_Helper_QRY_PartyLevelRangeMet(_MinLevel, _MaxLevel)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_CanGenerate((STRING)_RequirementID)
AND
DB_LLLIB_Treasure_Requirement_Flag(_RequirementID, _Flag, _FlagType, _FlagVal)
AND
LLLIB_Helper_QRY_PartyFlagSet(_Flag, _FlagType, _FlagVal)
AND
DB_LLLIB_Treasure_Requirement_Level(_RequirementID, _MinLevel, _MaxLevel)
AND
LLLIB_Helper_QRY_PartyLevelRangeMet(_MinLevel, _MaxLevel)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_IsRegisteredObject((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_IsRegisteredObject((GUIDSTRING)_Object)
AND
NOT DB_LLLIB_Treasure_RegisteredObject(_, _Object)
AND
GetTemplate(_Object, _Template)
AND
DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object,_)
AND
DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object,_)
AND
GetTemplate(_Object, _Template)
AND
DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure((GUIDSTRING)_Object, _TreasureID);
//END_REGION

//REGION ITEM_AMOUNT_COUNTING
QRY
LLLIB_QRY_Treasure_SkipAmountCheck((GUIDSTRING)_Object, (STRING)_RequirementID)
AND
IsTagged(_Object, "LLLIB_Treasure_GenerateEndlessly", 1)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_ItemLimitNotMet((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_RequirementID, (INTEGER)_GeneratedAmount, (INTEGER)_CurrentAmount)
AND
_RequirementID != ""
AND
DB_LLLIB_Treasure_Requirement_Amount(_RequirementID, _MaxAmount)
AND
_CurrentAmount < _MaxAmount
AND
IntegerSubtract(_GeneratedAmount, _MaxAmount, _AmountToCreate)
THEN
DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate);

QRY
LLLIB_QRY_Treasure_ItemLimitNotMet((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_RequirementID, (INTEGER)_GeneratedAmount, (INTEGER)_CurrentAmount)
AND
_RequirementID != ""
AND
NOT DB_LLLIB_Treasure_Requirement_Amount(_RequirementID,_)
AND
_CurrentAmount < _GeneratedAmount
AND
IntegerSubtract(_GeneratedAmount, _CurrentAmount, _AmountToCreate)
THEN
DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate);

QRY
LLLIB_QRY_Treasure_ItemLimitNotMet((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_RequirementID, (INTEGER)_GeneratedAmount, (INTEGER)_CurrentAmount)
AND
_RequirementID == ""
AND
_CurrentAmount < _GeneratedAmount
AND
IntegerSubtract(_GeneratedAmount, _CurrentAmount, _AmountToCreate)
THEN
DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate);

PROC
LLLIB_Treasure_CountItems((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_GeneratedAmount, (STRING)_RequirementID, (INTEGER)_IsStat)
AND
_IsStat <= 0
THEN
DB_LLLIB_Treasure_Temp_Queue_GenerateTemplateItem(_Object, _TreasureID, _ItemEntry, _GeneratedAmount, _RequirementID);
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, 0);
InventoryLaunchTemplateIterator(_Object, _ItemEntry, "LLLIB_Events_Treasure_CountTemplate", "LLLIB_Events_Treasure_CountComplete");
LeaderLog_DebugLog("[LLLIB:TreasureSystem:CountItems(Template)] Starting count iterator for [",_TreasureID,"]:[",_ItemEntry,"].");

PROC
LLLIB_Treasure_CountItems((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_GeneratedAmount, (STRING)_RequirementID, (INTEGER)_IsStat)
AND
_IsStat > 0
AND
DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate)
THEN
DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemEntry, _ItemTemplate, _GeneratedAmount, _RequirementID);
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, 0);
InventoryLaunchTemplateIterator(_Object, _ItemTemplate, "LLLIB_Events_Treasure_CountTemplate", "LLLIB_Events_Treasure_CountComplete");
LeaderLog_DebugLog("[LLLIB:TreasureSystem:CountItems(Stat)] Starting count iterator for [",_TreasureID,"]:[",_ItemEntry,"].");

PROC
LLLIB_Treasure_CountItems((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_GeneratedAmount, (STRING)_RequirementID, (INTEGER)_IsStat)
AND
_IsStat > 0
AND
NOT DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _)
THEN
DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemEntry, "", _GeneratedAmount, _RequirementID);
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, 0);
SetStoryEvent(_Object, "LLLIB_Events_Treasure_CountComplete");

PROC
LLLIB_Treasure_Internal_AddToItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, (INTEGER)_Amount)
AND
NOT DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _)
THEN
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, 0);

PROC
LLLIB_Treasure_Internal_AddToItemCount((GUIDSTRING)_Object, (STRING)_ItemEntry, (INTEGER)_Amount)
AND
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _CurrentAmount)
AND
IntegerSum(_CurrentAmount, _Amount, _NextAmount)
THEN
NOT DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _CurrentAmount);
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _NextAmount);

IF
StoryEvent(_Item, "LLLIB_Events_Treasure_CountTemplate")
AND
_Item != NULL_00000000-0000-0000-0000-000000000000
AND
GetTemplate(_Item, _ItemEntry)
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateTemplateItem(_Object, _TreasureID, _ItemEntry, _GeneratedAmount, _RequirementID)
AND
ItemGetAmount((ITEMGUID)_Item, _Amount)
THEN
LLLIB_Treasure_Internal_AddToItemCount(_Object, _ItemEntry, _Amount);

IF
StoryEvent(_Item, "LLLIB_Events_Treasure_CountTemplate")
THEN
LeaderLog_DebugLog("[LLLIB:TreasureSystem:CountTemplate] Iterating.");

IF
StoryEvent(_Item, "LLLIB_Events_Treasure_CountTemplate")
THEN
LeaderLog_DebugLog("[LLLIB:TreasureSystem:CountComplete] Iteration complete.");

IF
StoryEvent(_Item, "LLLIB_Events_Treasure_CountTemplate")
AND
_Item != NULL_00000000-0000-0000-0000-000000000000
AND
GetTemplate(_Item, _ItemTemplate)
AND
GetVarFixedString(_Item, "LLLIB_GeneratedItemStat", _ItemEntry)
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemEntry, _ItemTemplate, _GeneratedAmount, _RequirementID)
AND
ItemGetAmount((ITEMGUID)_Item, _Amount)
THEN
LLLIB_Treasure_Internal_AddToItemCount(_Object, _ItemEntry, _Amount);

IF
StoryEvent(_Object, "LLLIB_Events_Treasure_CountComplete")
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateTemplateItem(_Object, _TreasureID, _ItemEntry, _GeneratedAmount, _RequirementID)
AND
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _CurrentAmount)
AND
LLLIB_QRY_Treasure_ItemLimitNotMet(_Object, _ItemEntry, _RequirementID, _GeneratedAmount, _CurrentAmount)
AND
DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate)
THEN
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _AmountToCreate, 0);
NOT DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate);

IF
StoryEvent(_Object, "LLLIB_Events_Treasure_CountComplete")
THEN
LeaderLog_DebugLog("LL Iterator complete");

IF
StoryEvent(_Object, "LLLIB_Events_Treasure_CountComplete")
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateTemplateItem(_Object, _TreasureID, _ItemEntry, _GeneratedAmount, _RequirementID)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_JustGenerated", 0);
LLLIB_Treasure_Internal_StartQueueClear(_Object, _TreasureID, _ItemEntry);

IF
StoryEvent(_Object, "LLLIB_Events_Treasure_CountComplete")
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemEntry, _ItemTemplate, _GeneratedAmount, _RequirementID)
AND
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _CurrentAmount)
AND
LLLIB_QRY_Treasure_ItemLimitNotMet(_Object, _ItemEntry, _RequirementID, _GeneratedAmount, _CurrentAmount)
AND
DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate)
THEN
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _AmountToCreate, 1);
NOT DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate);

IF
StoryEvent(_Object, "LLLIB_Events_Treasure_CountComplete")
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemEntry, _ItemTemplate, _GeneratedAmount, _RequirementID)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_JustGenerated", 0);
LLLIB_Treasure_Internal_StartQueueClear(_Object, _TreasureID, _ItemEntry);

PROC
LLLIB_Treasure_Internal_StartQueueClear((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
NOT DB_Teasure_Temp_ClearQueueTimer(_Object, _TreasureID, _ItemEntry, _)
AND
GetUUID(_Object, _ID)
AND
StringConcatenate(_ID, "_", _Str1)
AND
StringConcatenate(_Str1, _TreasureID, _Str2)
AND
StringConcatenate(_Str2, "_", _Str3)
AND
StringConcatenate(_Str3, _ItemEntry, _Str4)
AND
StringConcatenate("LLIB_Timer_ClearQueue_", _Str4, _TimerName)
THEN
DB_Teasure_Temp_ClearQueueTimer(_Object, _TreasureID, _ItemEntry, _TimerName);
TimerLaunch(_TimerName, 1000);

IF
TimerFinished(_TimerName)
AND
DB_Teasure_Temp_ClearQueueTimer(_Object, _TreasureID, _ItemEntry, _TimerName)
THEN
LLLIB_Treasure_ClearQueue(_Object, _TreasureID, _ItemEntry);
NOT DB_Teasure_Temp_ClearQueueTimer(_Object, _TreasureID, _ItemEntry, _TimerName);
LeaderLog_DebugLog("[LLLIB:Treasure] Inventory iterator queue cleared for [",_TreasureID,"]:[",_ItemEntry,"].");

PROC
LLLIB_Treasure_ClearQueue((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemEntry, _ItemTemplate, _GeneratedAmount, _RequirementID)
THEN
NOT DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemEntry, _ItemTemplate, _GeneratedAmount, _RequirementID);

PROC
LLLIB_Treasure_ClearQueue((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_Temp_Queue_GenerateTemplateItem(_Object, _TreasureID, _ItemEntry, _GeneratedAmount, _RequirementID)
THEN
NOT DB_LLLIB_Treasure_Temp_Queue_GenerateTemplateItem(_Object, _TreasureID, _ItemEntry, _GeneratedAmount, _RequirementID);

PROC
LLLIB_Treasure_ClearQueue((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _Amount)
THEN
NOT DB_LLLIB_Treasure_Temp_ItemCount(_Object, _ItemEntry, _Amount);
//END_REGION

//REGION TREASURE_TABLE_GENERATION
PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID)
AND
DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)
AND
LLLIB_QRY_Treasure_CanGenerate(_RequirementID)
AND
NOT DB_LLLIB_Treasure_TableWasGenerated(_Object, _TreasureID, _TreasureTable)
AND
_UsePartyLevel > 0
AND
LeaderLog_QRY_DebugLog("Checking highest level")
AND
LLLIB_Helper_QRY_GetHighestLevelInParty()
AND
DB_LLLIB_Helper_Temp_HighestLevelInParty(_Level)
AND
LeaderLog_QRY_DebugLog("Creating backpack")
AND
CreateItemTemplateAtPosition("LOOT_BackPack_A_6c70c298-aa29-418f-a659-f8e0b5f5fa60", 0.0,0.0,0.0, _Backpack)
THEN
GenerateTreasure(_Backpack, _TreasureTable, _Level, NULL_00000000-0000-0000-0000-000000000000);
MoveAllItemsTo(_Backpack, _Object, 0, 0, 1);
ItemDestroy(_Backpack);
SetOnStage(_Backpack, 0);
LLLIB_Treasure_Internal_OnTreasureTableGenerated(_Object, _TreasureID, _TreasureTable);

PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID)
AND
DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)
AND
LLLIB_QRY_Treasure_CanGenerate(_RequirementID)
AND
NOT DB_LLLIB_Treasure_TableWasGenerated(_Object, _TreasureID, _TreasureTable)
AND
_UsePartyLevel <= 0
AND
LLLIB_Random(_MinLevel, _MaxLevel)
AND
DB_LLLIB_Temp_RandomResult(_Level)
AND
CreateItemTemplateAtPosition("LOOT_BackPack_A_6c70c298-aa29-418f-a659-f8e0b5f5fa60", 0.0,0.0,0.0, _Backpack)
THEN
GenerateTreasure(_Backpack, _TreasureTable, _Level, NULL_00000000-0000-0000-0000-000000000000);
MoveAllItemsTo(_Backpack, _Object, 0, 0, 1);
ItemDestroy(_Backpack);
SetOnStage(_Backpack, 0);
LLLIB_Treasure_Internal_OnTreasureTableGenerated(_Object, _TreasureID, _TreasureTable);

PROC
LLLIB_Treasure_Internal_OnTreasureTableGenerated((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_TreasureTable)
THEN
LLLIB_Treasure_MarkAsFinished(_Object, _TreasureID, _TreasureTable);
DB_LLLIB_Treasure_TableWasGenerated(_Object, _TreasureID, _TreasureTable);
//END_REGION

//REGION GENERATE_ITEMS
PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
LLLIB_QRY_Treasure_CanGenerate(_RequirementID)
AND
LLLIB_QRY_Treasure_SkipAmountCheck(_Object, _RequirementID)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_JustGenerated", 0);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _Amount, 0);

PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
LLLIB_QRY_Treasure_CanGenerate(_RequirementID)
AND
LLLIB_QRY_Treasure_SkipAmountCheck(_Object, _RequirementID)
THEN
//LeaderLog_DebugLog("[LLLIB:TreasureSystem:GenerateItems] Creating item by stat, with no amount requirement.");
ObjectSetFlag(_Object, "LLLIB_Treasure_JustGenerated", 0);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _Amount, 1);

PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
LLLIB_QRY_Treasure_CanGenerate(_RequirementID)
AND
NOT LLLIB_QRY_Treasure_SkipAmountCheck(_Object, _RequirementID)
THEN
LLLIB_Treasure_CountItems(_Object, _TreasureID, _ItemEntry, _Amount, _RequirementID, 0);

PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
LLLIB_QRY_Treasure_CanGenerate(_RequirementID)
AND
NOT LLLIB_QRY_Treasure_SkipAmountCheck(_Object, _RequirementID)
THEN
LLLIB_Treasure_CountItems(_Object, _TreasureID, _ItemEntry, _Amount, _RequirementID, 1);

IF
DB_LLLIB_Treasure_Temp_GenerateItem((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
AND
_IsStat <= 0
AND
_CreatedAmount < _MaxAmount
AND
IntegerSum(_CreatedAmount, 1, _NextAmount)
THEN
ItemTemplateAddTo(_ItemEntry, _Object, 1);
NOT DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount, _IsStat);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _NextAmount, _MaxAmount, _IsStat);

IF
DB_LLLIB_Treasure_Temp_GenerateItem((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
AND
_IsStat > 0
AND
_CreatedAmount < _MaxAmount
AND
IntegerSum(_CreatedAmount, 1, _NextAmount)
THEN
LLLIB_Treasure_Internal_CreateItemByStat(_Object, _ItemEntry, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount, _IsStat);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _NextAmount, _MaxAmount, _IsStat);

IF
DB_LLLIB_Treasure_Temp_GenerateItem((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
AND
_CreatedAmount >= _MaxAmount
AND
_IsStat <= 0
THEN
LLLIB_Treasure_MarkAsFinished(_Object, _ItemEntry, _TreasureID);

IF
DB_LLLIB_Treasure_Temp_GenerateItem((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
AND
_CreatedAmount >= _MaxAmount
THEN
NOT DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount, _IsStat);

PROC
LLLIB_Treasure_MarkAsFinished((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID)
THEN
LLLIB_Treasure_SendGeneratedEvent(_Object, _TreasureID, _ItemEntry);
LLLIB_Treasure_RemoveIfOnlyOnce(_Object, _TreasureID, _ItemEntry);
ObjectSetFlag(_Object, "LLLIB_Treasure_GenerationSuccessful", 0);

PROC
LLLIB_Treasure_MarkAsFinished((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID)
AND
GetUUID(_Object, _ID)
AND
StringConcatenate("LLLIB_Treasure_ResetJustGeneratedFlagTimer_", _ID, _TimerName)
AND
NOT DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName)
THEN
DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName);
TimerLaunch(_TimerName, 500);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName)
THEN
ObjectClearFlag(_Object, "LLLIB_Treasure_JustGenerated");
NOT DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName);
//LeaderLog_DebugLog("[LLLIB:TreasureSystem:ResetGeneratedFlagTimer] Flag and database Temp_MatchedTreasure cleared.");
//END_REGION

//REGION GENERATING_BY_STAT
PROC
LLLIB_Treasure_Internal_CreateItemByStat((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID)
AND
LLLIB_QRY_Treasure_PrepareGeneratorDummy()
AND
DB_LLLIB_Treasure_GeneratorDummies(_Dummy)
THEN
DB_LLLIB_Treasure_Temp_DummyTarget(_Object, _Dummy, _ItemEntry, _TreasureID);
//SetVarObject(_Dummy, "LLLIB_Treasure_ObjectTarget", _Object);
SetVarFixedString(_Dummy, "LLLIB_Treasure_ItemStat", _ItemEntry);
SetStoryEvent(_Dummy, "LLLIB_Treasure_GenerateByStat");
//LeaderLog_DebugLog("[LLLIB:TreasureSystem:StatItemGen] Created item by stat.");

PROC
LLLIB_Treasure_Internal_CreateItemByStat((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID)
AND
NOT DB_LLLIB_Treasure_GeneratorDummies(_)
THEN
LeaderLog_DebugLog("[LLLIB:TreasureSystem:StatItemGen][ERROR] Error creating item by stat: No generator dummy found!");

QRY
LLLIB_QRY_Treasure_PrepareGeneratorDummy()
AND
DB_LLLIB_Treasure_GeneratorDummies(_Dummy)
AND
ObjectExists(_Dummy, 0)
THEN
NOT DB_LLLIB_Treasure_GeneratorDummies(_Dummy);

QRY
LLLIB_QRY_Treasure_PrepareGeneratorDummy()
AND
DB_LLLIB_Treasure_GeneratorDummies(_Dummy)
AND
ObjectExists(_Dummy, 1)
AND
ObjectIsOnStage(_Dummy, 0)
THEN
SetOnStage(_Dummy, 1);

QRY
LLLIB_QRY_Treasure_PrepareGeneratorDummy()
THEN
LLLIB_Treasure_Internal_CreateGeneratorDummy();

PROC
LLLIB_Treasure_Internal_CreateGeneratorDummy()
AND
NOT DB_LLLIB_Treasure_GeneratorDummies(_)
AND
CharacterCreateAtPosition(0.0,0.0,0.0,"LLLIB_GeneratorDummy_24a5d60b-680b-4fbc-9b2c-19061a261297", 0, _Dummy)
THEN
DB_LLLIB_Treasure_GeneratorDummies(_Dummy);

IF
ItemAddedToCharacter(_Item, _Dummy)
AND
GetVarFixedString(_Dummy, "LLLIB_Treasure_ItemStat", _ItemEntry)
AND
DB_LLLIB_Treasure_Temp_DummyTarget(_Object, _Dummy, _ItemEntry, _TreasureID)
AND
ItemGetAmount(_Item, _Amount)
THEN
ItemToInventory(_Item, _Object, _Amount, 0, 1);
SetVarFixedString(_Item, "LLLIB_GeneratedItemStat", _ItemEntry);
SetVarFixedString(_Dummy, "LLLIB_Treasure_ItemStat", "");
NOT DB_LLLIB_Treasure_Temp_DummyTarget(_Object, _Dummy, _ItemEntry);
LLLIB_Treasure_MarkAsFinished(_Object, _ItemEntry, _TreasureID);
//LeaderLog_DebugLog("[LLLIB:TreasureSystem:StatItem] Stat item [",_ItemEntry,"] sent to target.");
//END_REGION

//REGION POST_GENERATION
IF
ItemAddedToCharacter(_Item, _Object)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_OnAdded(_Object, _Item, _TreasureID);

IF
ItemAddedToContainer(_Item, _Object)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_OnAdded(_Object, _Item, _TreasureID);

IF
ItemAddedToContainer(_Item, _Object)
AND
GetVarFixedString(_Item, "LLLIB_GeneratedItemStat", _ItemEntry)
AND
GetStatString(_Item, _Stat)
THEN
LeaderLog_DebugLog("[LLLIB:TreasureSystem:OnAdded(Debug)] Item with saved stat ",_ItemEntry,"(",_Stat,") added to container.");

PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item, (STRING)_TreasureID)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_JustGenerated", 1)
AND
GetTemplate(_Item, _ItemEntry)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
LLLIB_Treasure_AdjustItemLevel(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_ApplyDeltaMods(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_InsertRunes(_Item, _TreasureID, _ItemEntry);
//LeaderLog_DebugLog("[LLLIB:TreasureSystem:OnAdded(TemplateItem] Adjusted treasure level, delta mods, and runes.");

PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item, (STRING)_TreasureID)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_JustGenerated", 1)
AND
GetVarFixedString(_Item, "LLLIB_GeneratedItemStat", _ItemEntry)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
GetTemplate(_Item, _ItemTemplate)
THEN
//Link the stat to the template for easier amount retrieval later, hopefully.
DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate);
LLLIB_Treasure_AdjustItemLevel(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_ApplyDeltaMods(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_InsertRunes(_Item, _TreasureID, _ItemEntry);
//LeaderLog_DebugLog("[LLLIB:TreasureSystem:OnAdded(StatItem)] Adjusted treasure level, delta mods, and runes.");

PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item, (STRING)_TreasureID)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_JustGenerated", 1)
AND
GetVarFixedString(_Item, "LLLIB_GeneratedItemStat", _ItemEntry)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
NOT GetTemplate(_Item, _)
THEN
LeaderLog_DebugLog("[LLLIB:TreasureSystem:OnAdded(StatItem)][ERROR] Couldn't find a template for item with stat ", _ItemEntry);

/*
PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_JustGenerated", 1)
THEN
//LeaderLog_DebugLog("[LLLIB:TreasureSystem] Treasure added.");
*/

PROC
LLLIB_Treasure_SendGeneratedEvent((GUIDSTRING)_Owner, (STRING)_OwnerID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_GeneratedEvent(_OwnerID, _ItemEntry, _OnGeneratedEvent)
THEN
SetStoryEvent(_Owner, _OnGeneratedEvent);

PROC
LLLIB_Treasure_RemoveIfOnlyOnce((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
NOT DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LLLIB_Treasure_RemoveIfOnlyOnce((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_GenerationEnded");
SetStoryEvent(_Object, _OnCompletionEvent);

PROC
LLLIB_Treasure_DisableGenerationForObject((GUIDSTRING)_Object)
AND
IsTagged(_Object, "LLLIB_Treasure_GenerateEndlessly", 0)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_GenerationEnded");

IF
ObjectWasTagged(_Object, "LLLIB_Treasure_GenerateEndlessly")
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 1)
THEN
ObjectClearFlag(_Object, "LLLIB_Treasure_GenerationEnded");
//END_REGION

//REGION ITEM_POSTGEN_MODIFIERS
PROC
LLLIB_Treasure_AdjustItemLevel((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _UsePartyLevel, _MinLevel, _MaxLevel)
AND
_UsePartyLevel > 0
AND
LLLIB_Helper_QRY_GetHighestLevelInParty()
AND
DB_LLLIB_Helper_Temp_HighestLevelInParty(_Level)
THEN
ItemLevelUpTo(_Item, _Level);

PROC
LLLIB_Treasure_AdjustItemLevel((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _UsePartyLevel, _MinLevel, _MaxLevel)
AND
_UsePartyLevel <= 0
AND
LLLIB_Random(_MinLevel, _MaxLevel)
AND
DB_LLLIB_Temp_RandomResult(_Level)
THEN
ItemLevelUpTo(_Item, _Level);
NOT DB_LLLIB_Temp_RandomResult(_Level);

PROC
LLLIB_Treasure_ApplyDeltaMods((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemDeltaMods(_TreasureID, _ItemEntry, _Deltamod, _Chance)
AND
NOT ItemHasDeltaModifier(_Item, _Deltamod, _)
AND
LLLIB_Random(100)
AND
DB_LLLIB_Temp_RandomResult(_Roll)
AND
_Roll <= _Chance
THEN
ItemAddDeltaModifier(_Item, _Deltamod);
NOT DB_LLLIB_Temp_RandomResult(_Roll);

PROC
LLLIB_Treasure_InsertRunes((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
NOT DB_LLLIB_Treaasure_Temp_RuneSlot(_Item,_)
THEN
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, 0);

PROC
LLLIB_Treasure_InsertRunes((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemRunes(_TreasureID, _ItemEntry, _Rune, _Chance)
AND
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot)
AND
LLLIB_Treasure_QRY_InsertRuneInSlot(_Item, _Rune, _Slot, _Chance)
AND
IntegerSum(_Slot, 1, _NextSlot)
THEN
NOT DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot);
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _NextSlot);

QRY
LLLIB_Treasure_QRY_InsertRuneInSlot((ITEMGUID)_Item, (STRING)_Rune, (INTEGER)_Slot, (INTEGER)_Chance)
AND
NOT ItemGetRuneItemTemplate(_Item, _Slot, _)
AND
LLLIB_Random(100)
AND
DB_LLLIB_Temp_RandomResult(_Roll)
AND
_Roll <= _Chance
THEN
LLLIB_Treasure_Internal_DummyInsertRune(_Item, _Rune, _Slot);
NOT DB_LLLIB_Temp_RandomResult(_Roll);

PROC
LLLIB_Treasure_Internal_DummyInsertRune((ITEMGUID)_Item, (STRING)_Rune, (INTEGER)_Slot)
AND
DB_LLLIB_Treasure_GeneratorDummies(_Dummy)
THEN
ItemInsertRune((CHARACTERGUID)_Dummy, _Item, _Rune, _Slot);

PROC
LLLIB_Treasure_InsertRunes((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot)
THEN
NOT DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot);
//END_REGION

//REGION GENERATION_EVENTS
//Containers
IF
//ItemOpened(_Object)
CharacterUsedItem(_, _Object)
AND
IsTagged(_Object, "LLLIB_Item_IgnoreOpened", 0)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 0)
AND
ItemIsContainer(_Object, 1)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
ObjectFlagSet("LLLIB_Treasure_GenerationSuccessful", _Object, _)
AND
ItemIsContainer((ITEMGUID)_Object, 1)
THEN
LLLIB_Treasure_DisableGenerationForObject((GUIDSTRING)_Object);
ObjectClearFlag(_Object, "LLLIB_Treasure_GenerationSuccessful");

IF
ObjectFlagSet("LLLIB_Treasure_GenerateNow", _Object, _)
AND
LLLIB_Helper_QRY_ClearObjectFlag(_Object, "LLLIB_Treasure_GenerateNow")
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
TradeGenerationEnded(_Object)
AND
IsTagged(_Object, "LLLIB_Trader_IgnoreTradeGeneration", 0)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 0)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
DialogStarted(_Dialog, _Instance)
AND
DialogGetInvolvedNPC(_Instance, 1, _Object)
AND
IsTagged(_Object, "LLLIB_Trader_GenerateOnDialog", 1)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 0)
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
ObjectFlagSet("LLLIB_Trader_OpenTrade", (CHARACTERGUID)_Object, _Instance)
AND
LLLIB_Helper_QRY_ClearObjectFlag(_Object, "LLLIB_Treasure_OpenTrade")
AND
DialogGetInvolvedPlayer(_Instance, 1, (CHARACTERGUID)_Player)
THEN
StartTrade(_Player, _Object);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
