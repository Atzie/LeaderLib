Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLLIB_Sorter_InitSettings();
//DB_LLLIB_Sorter_Codex(_Index, _Char)
//DB_LLLIB_Sorter_Iterator(_Index)
//Output
//DB_LLLIB_Sorter_FinalSorted(_Index, _ID, _Str)
//Temp
//DB_LLLIB_Sorter_Temp_StringQueue(_Char, _ID, _Str, _FirstCharIndex)
//DB_LLLIB_Sorter_Temp_StringBackup(_Char, _ID, _Str)
//DB_LLLIB_Sorter_Temp_StringCharCount(_Char, _Total)
//DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _Char, _CheckIndex _Total)
//DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex)
//DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex)
//DB_LLLIB_Sorter_Temp_SortGroup(_ID, _Group)
//DB_LLLIB_Sorter_Temp_MatchedString(_ID)
KBSECTION
PROC
LLLIB_Sorter_InitSettings()
THEN
LLLIB_Sorter_BuildIterator();
LLLIB_Sorter_BuildCodex();

//REGION UPDATING
PROC
LLLIB_System_UpdateDatabases()
THEN
LLLIB_Sorter_InitSettings();
LeaderLog_Debug("[LLLIB:Sorter] Databases updated.");

PROC
LLLIB_System_ClearDatabases()
THEN
LeaderLog_Debug("[LLLIB:Sorter] Databases cleared.");

PROC
LLLIB_Updater_ResetDatabases()
THEN
DB_NOOP(1);
//END_REGION

//REGION CODEX
PROC
LLLIB_Sorter_AddToCodex((STRING)_AlphanumericChar)
AND
NOT DB_LLLIB_Sorter_Codex(_,_AlphanumericChar)
AND
SysCount("DB_LLLIB_Sorter_Codex", 2, _Index)
THEN
DB_LLLIB_Sorter_Codex(_Index, _AlphanumericChar);

PROC
LLLIB_Sorter_BuildCodex()
AND
NOT DB_LLLIB_Sorter_Codex(_,_)
THEN
LLLIB_Sorter_AddToCodex("A");
LLLIB_Sorter_AddToCodex("a");
LLLIB_Sorter_AddToCodex("B");
LLLIB_Sorter_AddToCodex("b");
LLLIB_Sorter_AddToCodex("C");
LLLIB_Sorter_AddToCodex("c");
LLLIB_Sorter_AddToCodex("D");
LLLIB_Sorter_AddToCodex("d");
LLLIB_Sorter_AddToCodex("E");
LLLIB_Sorter_AddToCodex("e");
LLLIB_Sorter_AddToCodex("F");
LLLIB_Sorter_AddToCodex("f");
LLLIB_Sorter_AddToCodex("G");
LLLIB_Sorter_AddToCodex("g");
LLLIB_Sorter_AddToCodex("H");
LLLIB_Sorter_AddToCodex("h");
LLLIB_Sorter_AddToCodex("I");
LLLIB_Sorter_AddToCodex("i");
LLLIB_Sorter_AddToCodex("J");
LLLIB_Sorter_AddToCodex("j");
LLLIB_Sorter_AddToCodex("K");
LLLIB_Sorter_AddToCodex("k");
LLLIB_Sorter_AddToCodex("L");
LLLIB_Sorter_AddToCodex("l");
LLLIB_Sorter_AddToCodex("M");
LLLIB_Sorter_AddToCodex("m");
LLLIB_Sorter_AddToCodex("N");
LLLIB_Sorter_AddToCodex("n");
LLLIB_Sorter_AddToCodex("O");
LLLIB_Sorter_AddToCodex("o");
LLLIB_Sorter_AddToCodex("P");
LLLIB_Sorter_AddToCodex("p");
LLLIB_Sorter_AddToCodex("Q");
LLLIB_Sorter_AddToCodex("q");
LLLIB_Sorter_AddToCodex("R");
LLLIB_Sorter_AddToCodex("r");
LLLIB_Sorter_AddToCodex("S");
LLLIB_Sorter_AddToCodex("s");
LLLIB_Sorter_AddToCodex("T");
LLLIB_Sorter_AddToCodex("t");
LLLIB_Sorter_AddToCodex("U");
LLLIB_Sorter_AddToCodex("u");
LLLIB_Sorter_AddToCodex("V");
LLLIB_Sorter_AddToCodex("v");
LLLIB_Sorter_AddToCodex("W");
LLLIB_Sorter_AddToCodex("w");
LLLIB_Sorter_AddToCodex("X");
LLLIB_Sorter_AddToCodex("x");
LLLIB_Sorter_AddToCodex("Y");
LLLIB_Sorter_AddToCodex("y");
LLLIB_Sorter_AddToCodex("Z");
LLLIB_Sorter_AddToCodex("z");

LLLIB_Sorter_AddToCodex("0");
LLLIB_Sorter_AddToCodex("1");
LLLIB_Sorter_AddToCodex("2");
LLLIB_Sorter_AddToCodex("3");
LLLIB_Sorter_AddToCodex("4");
LLLIB_Sorter_AddToCodex("5");
LLLIB_Sorter_AddToCodex("6");
LLLIB_Sorter_AddToCodex("7");
LLLIB_Sorter_AddToCodex("8");
LLLIB_Sorter_AddToCodex("9");
//END_REGION

//REGION CHARACTER_INDEX
//Max 9 right now, since searching for 255 chars seems unnecessary when we just want to skip non-alphanumeric characters.
PROC
LLLIB_Sorter_BuildIterator()
AND
NOT DB_LLLIB_Sorter_Iterator(_)
THEN
DB_LLLIB_Sorter_Iterator(0);
DB_LLLIB_Sorter_Iterator(1);
DB_LLLIB_Sorter_Iterator(2);
DB_LLLIB_Sorter_Iterator(3);
DB_LLLIB_Sorter_Iterator(4);
DB_LLLIB_Sorter_Iterator(5);
DB_LLLIB_Sorter_Iterator(6);
DB_LLLIB_Sorter_Iterator(7);
DB_LLLIB_Sorter_Iterator(8);
DB_LLLIB_Sorter_Iterator(9);
DB_LLLIB_Sorter_Iterator(10);
DB_LLLIB_Sorter_Iterator(11);
DB_LLLIB_Sorter_Iterator(12);
DB_LLLIB_Sorter_Iterator(13);
DB_LLLIB_Sorter_Iterator(14);
DB_LLLIB_Sorter_Iterator(15);
DB_LLLIB_Sorter_Iterator(16);
DB_LLLIB_Sorter_Iterator(17);
DB_LLLIB_Sorter_Iterator(18);
DB_LLLIB_Sorter_Iterator(19);
DB_LLLIB_Sorter_Iterator(20);
DB_LLLIB_Sorter_Iterator(21);
//END_REGION

//REGION SCRIPT_INTERACTION
PROC
LLLIB_Sorter_RunSorter()
THEN
LLLIB_Sorter_SaveStrings();
LLLIB_Sorter_SortStrings();
LLLIB_Sorter_AddUnsortedStrings();

PROC
LLLIB_Sorter_SaveStrings()
AND
DB_LLLIB_Sorter_Temp_StringQueue(_Char, _ID, _Str, _FirstCharIndex)
THEN
DB_LLLIB_Sorter_Temp_StringBackup(_ID, _Str);

PROC
LLLIB_Sorter_AddUnsortedStrings()
AND
DB_LLLIB_Sorter_Temp_StringBackup(_ID, _Str)
AND
NOT DB_LLLIB_Sorter_FinalSorted(_, _ID, _Str)
THEN
LeaderLog_Debug("[LLLIB:Sorter][ERROR] string [",_ID,"] = '",_Str,"' returned unsorted. Adding back in at the end.");
LLLIB_Sorter_FinalizeString(_ID, _Str);
NOT DB_LLLIB_Sorter_Temp_StringBackup(_ID, _Str);

PROC
LLLIB_Sorter_ClearData()
THEN
SysClear("DB_LLLIB_Sorter_FinalSorted", 3);
SysClear("DB_LLLIB_Sorter_Temp_StringQueue", 4);
SysClear("DB_LLLIB_Sorter_Temp_StringBackup", 3);
SysClear("DB_LLLIB_Sorter_Temp_StringCharCount", 2);
SysClear("DB_LLLIB_Sorter_Temp_StringCharMatchCount", 4);
SysClear("DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings", 4);
SysClear("DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup", 3);
//END_REGION

//REGION ADDING
//Run this first to add strings to sort.
PROC
LLLIB_Sorter_AddString((STRING)_ID, (STRING)_Str)
AND
NOT DB_LLLIB_Sorter_Temp_StringQueue(_, _ID, _Str, _)
AND
StringSub(_Str, 0, 1, _Char)
AND
DB_LLLIB_Sorter_Codex(_Index, _Char)
THEN
DB_LLLIB_Sorter_Temp_StringQueue(_Char, _ID, _Str, 0);

PROC
LLLIB_Sorter_AddString((STRING)_ID, (STRING)_Str)
AND
StringSub(_Str, 0, 1, _FirstChar)
AND
NOT DB_LLLIB_Sorter_Codex(_, _FirstChar)
AND
DB_LLLIB_Sorter_Iterator(_i) // Find a character, up to 21 tries
AND
NOT DB_LLLIB_Sorter_Temp_StringQueue(_, _ID, _Str, _)
AND
StringSub(_Str, _i, 1, _Char)
AND
DB_LLLIB_Sorter_Codex(_Index, _Char)
THEN
DB_LLLIB_Sorter_Temp_StringQueue(_Char, _ID, _Str, _i);

PROC
LLLIB_Sorter_FinalizeString((STRING)_ID, (STRING)_Str)
AND
SysCount("DB_LLLIB_Sorter_FinalSorted", 3, _Index)
THEN
DB_LLLIB_Sorter_FinalSorted(_Index, _ID, _Str);
LeaderLog_Debug("[LLLIB:Sorter] Finished sorting string [",_ID,"] = '",_Str,"'");
//END_REGION

//REGION SORTING
PROC
LLLIB_Sorter_SortStrings()
AND
DB_LLLIB_Sorter_Codex(_, _Char)
AND
LLLIB_QRY_Sorter_Internal_CountStringsForChar(_Char)
AND
DB_LLLIB_Sorter_Temp_StringCharCount(_Char, _Total)
AND
_Total == 1
AND
DB_LLLIB_Sorter_Temp_StringQueue(_Char, _ID, _Str, _FirstCharIndex)
THEN
//LeaderLog_Debug("[LLLIB:Sorter] Char[",_Char,"] only has 1 entry. Finalizing.");
NOT DB_LLLIB_Sorter_Temp_StringQueue(_Char, _ID, _Str, _FirstCharIndex);
LLLIB_Sorter_FinalizeString(_ID, _Str);

PROC
LLLIB_Sorter_SortStrings()
AND
DB_LLLIB_Sorter_Codex(_, _Char)
AND
LLLIB_QRY_Sorter_Internal_CountStringsForChar(_Char)
AND
DB_LLLIB_Sorter_Temp_StringCharCount(_Char, _Total)
AND
_Total > 1
AND
LeaderLog_QRY_Debug("[LLLIB:Sorter] Char[",_Char,"] has multiple entries. Sorting.")
THEN
LLLIB_Sorter_SortStringsForChar(_Char);

QRY
LLLIB_QRY_Sorter_Internal_CountStringsForChar((STRING)_Char)
AND
DB_LLLIB_Sorter_Temp_StringCharCount(_Char, _Total)
THEN
NOT DB_LLLIB_Sorter_Temp_StringCharCount(_Char, _Total);

QRY
LLLIB_QRY_Sorter_Internal_CountStringsForChar((STRING)_Char)
AND
NOT DB_LLLIB_Sorter_Temp_StringCharCount(_Char, _)
THEN
DB_LLLIB_Sorter_Temp_StringCharCount(_Char, 0);

QRY
LLLIB_QRY_Sorter_Internal_CountStringsForChar((STRING)_Char)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_Char, _ID, _Str, _FirstCharIndex)
AND
DB_LLLIB_Sorter_Temp_StringCharCount(_Char, _Total)
AND
IntegerSum(_Total, 1, _NewTotal)
THEN
NOT DB_LLLIB_Sorter_Temp_StringCharCount(_Char, _Total);
DB_LLLIB_Sorter_Temp_StringCharCount(_Char, _NewTotal);
//END_REGION

//REGION CHAR_SORTING_COUNTING
QRY
LLLIB_QRY_Sorter_Internal_CountStringMatchesForChar((STRING)_ParentChar, (STRING)_Char, (INTEGER)_CheckIndex)
AND
DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _Char, _CheckIndex, _Total)
THEN
NOT DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _Char, _CheckIndex, _Total);

QRY
LLLIB_QRY_Sorter_Internal_CountStringMatchesForChar((STRING)_ParentChar, (STRING)_Char, (INTEGER)_CheckIndex)
AND
NOT DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _Char, _CheckIndex, _)
THEN
DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _Char, _CheckIndex, 0);

QRY
LLLIB_QRY_Sorter_Internal_CountStringMatchesForChar((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_CheckIndex)
AND
DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex)
AND
DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _CheckChar, _CheckIndex, _Total)
AND
IntegerSum(_Total, 1, _NewTotal)
THEN
NOT DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _CheckChar, _CheckIndex, _Total);
DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _CheckChar, _CheckIndex, _NewTotal);
//END_REGION

//REGION CHAR_SORTING
PROC
LLLIB_Sorter_SortStringsForChar((STRING)_ParentChar)
THEN
LLLIB_Sorter_Internal_IterateChar(_ParentChar, "");

QRY
LLLIB_QRY_Sorter_IsSortGroup((STRING)_ID, (STRING)_Group)
AND
_Group == ""
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Sorter_IsSortGroup((STRING)_ID, (STRING)_Group)
AND
DB_LLLIB_Sorter_Temp_SortGroup(_ID, _Group)
THEN
DB_NOOP(1);

PROC
LLLIB_Sorter_Internal_IterateChar((STRING)_ParentChar, (STRING)_Group)
AND
DB_LLLIB_Sorter_Codex(_CharIndex, _CheckChar)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_ParentChar, _ID, _Str, _StartCheckIndex)
AND
LLLIB_QRY_Sorter_IsSortGroup(_ID, _Group)
AND
NOT DB_LLLIB_Sorter_Temp_MatchedString(_ID) // Match only once per iteration
AND
IntegerSum(_StartCheckIndex, 1, _CheckIndex)
AND
StringSub(_Str, _CheckIndex, 1, _SubStr)
AND
_CheckChar == _SubStr
THEN
//LeaderLog_Debug("[LLLIB:Sorter] Match in Char[",_ParentChar,"] for [",_CheckChar,"] in substring '",_SubStr,"' for '",_Str,"'");
NOT DB_LLLIB_Sorter_Temp_StringQueue(_ParentChar, _ID, _Str, _StartCheckIndex);
DB_LLLIB_Sorter_Temp_StringQueue(_ParentChar, _ID, _Str, _CheckIndex);
DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex);
DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex);
DB_LLLIB_Sorter_Temp_MatchedString(_ID);

PROC
LLLIB_Sorter_Internal_IterateChar((STRING)_ParentChar, (STRING)_Group)
AND
DB_LLLIB_Sorter_Temp_MatchedString(_ID)
THEN
NOT DB_LLLIB_Sorter_Temp_MatchedString(_ID);

QRY
LLLIB_QRY_Sorter_ShouldProcess((STRING)_ParentChar)
AND
DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _, _)
THEN
DB_NOOP(1);

PROC
LLLIB_Sorter_Internal_IterateChar((STRING)_ParentChar, (STRING)_Group)
AND
LLLIB_QRY_Sorter_ShouldProcess(_ParentChar)
THEN
//LeaderLog_Debug("[LLLIB:Sorter] Processing matches for Char[",_ParentChar,"]");
LLLIB_Sorter_Internal_ProcessMatches(_ParentChar);

PROC
LLLIB_Sorter_Internal_ProcessMatches((STRING)_ParentChar)
AND
DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex)
AND
LLLIB_QRY_Sorter_Internal_FinalizeDuplicates(_ParentChar, _CheckChar, _CheckIndex)
AND
LLLIB_QRY_Sorter_Internal_CountStringMatchesForChar(_ParentChar, _CheckChar, _CheckIndex)
AND
DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _CheckChar, _CheckIndex, _Total)
AND
IntegertoString(_Total, _TotalStr)
AND
IntegertoString(_CheckIndex, _CheckIndexStr)
THEN
//LeaderLog_Debug("[LLLIB:Sorter] [",_TotalStr,"] total matches for Char[",_ParentChar,"][",_CheckChar,"][",_CheckIndexStr,"]");
LLLIB_Sorter_Internal_ProcessMatchTotal(_ParentChar, _CheckChar, _Total, _CheckIndex);
NOT DB_LLLIB_Sorter_Temp_StringCharMatchCount(_ParentChar, _CheckChar, _CheckIndex, _Total);

QRY
LLLIB_QRY_Sorter_Internal_FinalizeDuplicates((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_CheckIndex)
THEN
LLLIB_Sorter_Internal_FinalizeDuplicates(_ParentChar, _CheckChar, _CheckIndex);

//Check for duplicates
PROC
LLLIB_Sorter_Internal_FinalizeDuplicates((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_CheckIndex)
AND
DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex)
AND
DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex)
AND
NOT DB_LLLIB_Sorter_Temp_LastString(_ParentChar, _ID, _CheckChar, _CheckIndex, _)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_Char, _ID, _Str, _FirstCharIndex)
THEN
DB_LLLIB_Sorter_Temp_LastString(_ParentChar, _ID, _CheckChar, _CheckIndex, _Str);

PROC
LLLIB_Sorter_Internal_FinalizeDuplicates((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_CheckIndex)
AND
DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex)
AND
DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex)
AND
DB_LLLIB_Sorter_Temp_LastString(_ParentChar, _OtherID, _CheckChar, _CheckIndex, _OtherStr)
AND
_ID != _OtherID
AND
DB_LLLIB_Sorter_Temp_StringQueue(_ParentChar, _ID, _Str, _FirstCharIndex)
AND
_Str == _OtherStr
THEN
NOT DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex);
NOT DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _OtherID, _CheckChar, _CheckIndex);
NOT DB_LLLIB_Sorter_Temp_LastString(_ParentChar, _ID, _CheckChar, _CheckIndex, _Str);
NOT DB_LLLIB_Sorter_Temp_LastString(_ParentChar, _OtherID, _CheckChar, _CheckIndex, _OtherStr);
NOT DB_LLLIB_Sorter_Temp_StringQueue(_ParentChar, _ID, _Str, _FirstCharIndex);
NOT DB_LLLIB_Sorter_Temp_StringQueue(_ParentChar, _OtherID, _OtherStr, _FirstCharIndex);
LeaderLog_Debug("[LLLIB:Sorter] [DUPLICATES] [",_ID,"] and [",_OtherID,"] have the same string value of '",_Str,"'. Finalizing.");
LLLIB_Sorter_FinalizeString(_ID, _Str);
LLLIB_Sorter_FinalizeString(_OtherID, _OtherStr);

PROC
LLLIB_Sorter_Internal_FinalizeDuplicates((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_CheckIndex)
AND
DB_LLLIB_Sorter_Temp_LastString(_ParentChar, _ID, _CheckChar, _CheckIndex, _Str)
THEN
NOT DB_LLLIB_Sorter_Temp_LastString(_ParentChar, _ID, _CheckChar, _CheckIndex, _Str);

PROC
LLLIB_Sorter_Internal_ProcessMatchTotal((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_Total, (INTEGER)_CheckIndex)
AND
_Total > 1
AND
DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex)
AND
Random(999, _Ran)
AND
IntegertoString(_Ran, _RanStr)
AND
StringConcatenate(_ParentChar, _CheckChar, _Str1)
AND
StringConcatenate(_Str1, _RanStr, _Group)
THEN
LLLIB_Sorter_Internal_SetSortGroup(_ParentChar, _CheckChar, _CheckIndex, _Group);
NOT DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex);
//LeaderLog_Debug("[LLLIB:Sorter] Continuing iteration for Char[",_ParentChar,"]");
LLLIB_Sorter_Internal_IterateChar(_ParentChar, _Group);

PROC
LLLIB_Sorter_Internal_SetSortGroup((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_CheckIndex, (STRING)_Group)
AND
DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex)
AND
DB_LLLIB_Sorter_Temp_SortGroup(_ID, _PastGroup)
THEN
NOT DB_LLLIB_Sorter_Temp_SortGroup(_ID, _PastGroup);

PROC
LLLIB_Sorter_Internal_SetSortGroup((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_CheckIndex, (STRING)_Group)
AND
DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex)
THEN
//LeaderLog_Debug("[LLLIB:Sorter] Group [",_Group,"] set on [",_ID,"]");
DB_LLLIB_Sorter_Temp_SortGroup(_ID, _Group);

PROC
LLLIB_Sorter_Internal_ProcessMatchTotal((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_Total, (INTEGER)_CheckIndex)
AND
_Total == 1
AND
DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex)
AND
DB_LLLIB_Sorter_Temp_StringQueue(_ParentChar, _ID, _Str, _FirstCharIndex)
THEN
NOT DB_LLLIB_Sorter_Temp_CharIterator_MatchedStrings(_ParentChar, _ID, _CheckChar, _CheckIndex);
NOT DB_LLLIB_Sorter_Temp_StringQueue(_ParentChar, _ID, _Str, _FirstCharIndex);
NOT DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex);
LLLIB_Sorter_FinalizeString(_ID, _Str);

PROC
LLLIB_Sorter_Internal_ProcessMatchTotal((STRING)_ParentChar, (STRING)_CheckChar, (INTEGER)_Total, (INTEGER)_CheckIndex)
AND
_Total <= 0
AND
DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex)
THEN
NOT DB_LLLIB_Sorter_Temp_CharIterator_CheckSubGroup(_ParentChar, _CheckChar, _CheckIndex);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
