Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LLLIB_Treasure_Temp_ActiveTraderDialog(_Trader, _Instance)
KBSECTION
IF
GameStarted("LeaderLib_TestLevel",_)
THEN
LLLIB_Trader_Register_Trader("LLLIB_TestLevel_Trader", "Elves_Female_Clothing_3ba29ecd-4849-494d-a9a6-6221eea6761c", 1);
LLLIB_Trader_Register_PositionObject("LLLIB_TestLevel_Trader", "LeaderLib_TestLevel", ITEMGUID_LLLIB_Debug_TestChest_ff6c9edf-aa21-447a-8bb2-2a647a8dae46);
LLLIB_Trader_Register_Dialog("LLLIB_TestLevel_Trader", "", "LLLIB_RetiredLeader_Default");

LLLIB_Treasure_Register_TreasureToTemplate("LLLIB_TestLevel_Trader", "Elves_Female_Clothing_3ba29ecd-4849-494d-a9a6-6221eea6761c");
LLLIB_Treasure_Register_TreasureTable("LLLIB_TestLevel_Trader", "TEST_Generation", "", 1);
LLLIB_Treasure_AddTreasureItemTemplate("LLLIB_TestLevel_Trader", "LOOT_Source_Orb_106a7107-cf36-4331-b5b5-6de71969f370", 1, "LLLIB_Debug_TraderRequirements");
LLLIB_Requirements_AddFlagRequirement("LLLIB_Debug_TraderRequirements", "LLLIB_LeaderTrader_IntroDone", "Object", 1);
//LLLIB_Requirements_AddPartyLevelRequirement("LLLIB_Debug_TraderRequirements", 2, 2);

LLLIB_Treasure_Register_TreasureToObject("LLLIB_TestLevel_Chest1", ITEMGUID_LLLIB_Debug_TestChest_ff6c9edf-aa21-447a-8bb2-2a647a8dae46);
LLLIB_Treasure_Register_TreasureTable("LLLIB_TestLevel_Chest1", "TEST_Generation", "LLLIB_Debug_TraderRequirements", 1);
LLLIB_Treasure_AddTreasureItemTemplate("LLLIB_TestLevel_Chest1", "LOOT_Source_Orb_106a7107-cf36-4331-b5b5-6de71969f370", 2, "LLLIB_TestLevel_Chest1_Requirements");
LLLIB_Treasure_Configure_AddMaxAmount("LLLIB_TestLevel_Chest1", "LOOT_Source_Orb_106a7107-cf36-4331-b5b5-6de71969f370", 1);
LLLIB_Requirements_AddFlagRequirement("LLLIB_TestLevel_Chest1_Requirements", "LLLIB_LeaderTrader_IntroDone", "Object", 0);

//LLLIB_Treasure_AddTreasureItemTemplate("LLLIB_TestLevel_Chest1", "WPN_Dwarves_Sword_2H_B_03f8fb7a-59cf-47eb-9298-79cedaf744e5", 1);
LLLIB_Treasure_Configure_ItemLevel("LLLIB_TestLevel_Chest1", "WPN_Dwarves_Sword_2H_B_03f8fb7a-59cf-47eb-9298-79cedaf744e5", 0, 5, 10);
//LLLIB_Treasure_AddTreasureItemTemplate("LLLIB_TestLevel_Chest1", "WPN_Elves_Spear_2H_B_bec707cd-8340-4d4d-8cdc-edfedf7f311d", 1);
LLLIB_Treasure_Configure_ItemLevel("LLLIB_TestLevel_Chest1", "WPN_Elves_Spear_2H_B_bec707cd-8340-4d4d-8cdc-edfedf7f311d", 0, 1);

LLLIB_Treasure_Register_TreasureToObject("LLLIB_TestLevel_Chest2", ITEMGUID_LLLIB_DebugLevel_TestChest2_cde2491b-741c-4442-a016-74761b43f3c5);
LLLIB_Treasure_AddTreasureItemStat("LLLIB_TestLevel_Chest2", "WPN_Cheat_Sword_1H_RuneSlot2", 1, "LLLIB_TestLevel_Chest2_Requirements");
LLLIB_Requirements_AddFlagRequirement("LLLIB_TestLevel_Chest2_Requirements", "LLLIB_LeaderTrader_IntroDone", "Object", 1);
LLLIB_Treasure_Configure_ItemLevel("LLLIB_TestLevel_Chest2", "WPN_Cheat_Sword_1H_RuneSlot2", 0, 2, 13);
LLLIB_Treasure_Configure_AddDeltaMod("LLLIB_TestLevel_Chest2", "WPN_Cheat_Sword_1H_RuneSlot2", "Boost_Weapon_Ability_FireSpecialist_Staff", 75);
LLLIB_Treasure_Configure_AddDeltaMod("LLLIB_TestLevel_Chest2", "WPN_Cheat_Sword_1H_RuneSlot2", "Boost_Weapon_Secondary_Accuracy_Medium", 20);
LLLIB_Treasure_Configure_AddDeltaMod("LLLIB_TestLevel_Chest2", "WPN_Cheat_Sword_1H_RuneSlot2", "Boost_Weapon_Damage_Air_Medium_Axe", 40);
LLLIB_Treasure_Configure_AddRune("LLLIB_TestLevel_Chest2", "WPN_Cheat_Sword_1H_RuneSlot2", "LOOT_Rune_Flame_Large_9ac874d8-a7e5-48b1-954a-b11b46f6f390", 25);
LLLIB_Treasure_Configure_AddRune("LLLIB_TestLevel_Chest2", "WPN_Cheat_Sword_1H_RuneSlot2", "LOOT_Rune_Masterwork_Large_7e16d9af-6865-4f0f-a67a-144b8ef2da26", 15);
LLLIB_Treasure_Configure_AddRune("LLLIB_TestLevel_Chest2", "WPN_Cheat_Sword_1H_RuneSlot2", "LOOT_Rune_Thunder_Small_f27c8738-e46c-4780-98a1-2db27407e6ea", 15);

LLLIB_Treasure_Configure_GenerationType("LLLIB_TestLevel_Chest2", "WPN_Cheat_Sword_1H_RuneSlot2", "REQUIREMENT_UNLOCKED");

//GlobalSetFlag("LeaderLib_DiscoveredLeaderTraderBackground");

//Sorting/Menu test

LeaderLib_RegisterModMenu("LLZ1", "[Zieonimus] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZ2", "[Zzznonom] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZ3", "[Zzaonimus] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZ4", "[Zaronimus] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZ5", "[Zironimus] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLNWIZ", "[Naming Wizard] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLEQSET", "[Equipment Sets] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLDBT", "[Debug Tools] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZasd7", "[Blaaaabbbbbzter] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZasd6", "[Blaaaabbbbbzter] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLasdZ92", "[Blaaaabbbbbzter9] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLTest10", "Zeronimus", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLTest7", "Bananas", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLTest2", "Apples2", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLTest1", "Apples1", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ2", "[ModMenu2] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ11", "[ModMenu11] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ3", "[ModMenu3] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ5", "[ModMenu5] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ7", "[ModMenu7] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ9", "[ModMenu9] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ10", "[ModMenu10] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ12", "[ModMenu12] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ1", "[ModMenu1] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ6", "[ModMenu6] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ4", "[ModMenu4] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");
LeaderLib_RegisterModMenu("LLZZ8", "[ModMenu8] Settings", "LLLIB_SettingsMenu", "LeaderLib", "LaughingLeader");

LLLIB_ModSettings_CalculateMaxPage();

/*
IF
StoryEvent(_, "LeaderLib_Initialized")
AND
LLLIB_StringExt_QRY_CompareStrings("Test", "[ModMenu2] Settings", "[ModMenu10] Settings")
AND
DB_LLLIB_Sorter_Temp_StringCompare_Results("Test", _Str1, _Str2, _CompareVal)
AND
IntegertoString(_CompareVal, _CompareValStr)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:DebugLevel] String comparison: '",_Str1,"' and '",_Str2,"' = [",_CompareValStr,"]");
*/

IF
GameStarted("LeaderLib_TestLevel",_)
THEN
TimerLaunch("LeaderLib_TestLevel_IteratorDelay", 500);

IF
TimerFinished("LeaderLib_TestLevel_IteratorDelay")
THEN
//LeaderLog_Log("DEBUG", "[LLLIB:DebugLevel] ","Searching for players.");
CharacterLaunchIterator("LLLIB_Debug_AddPlayer");
LLLIB_Events_SendEvent("LLLIB_Events_TestEvent");

IF
StoryEvent(_, "LLLIB_Events_TestEvent")
THEN
LeaderLog_Log("DEBUG", "[LLLIB:DebugLevel] ","LLLIB_Events_TestEvent ran.");

IF
StoryEvent((CHARACTERGUID)_Player, "LLLIB_Debug_AddPlayer")
AND
CharacterIsPlayer(_Player, 1)
AND
NOT DB_IsPlayer(_Player)
THEN
DB_IsPlayer(_Player);
//LeaderLog_Log("DEBUG", "[LLLIB:DebugLevel] ","Added player to DB_IsPlayer.");
//ObjectClearFlag(_Player, "LLLIB_LeaderTrader_IntroDone");

IF
DialogStarted(_Dialog, _Instance)
AND
DialogGetInvolvedNPC(_Instance, 1, _Trader)
AND
IsTagged(_Trader, "LLLIB_Treasure_GenerateOnDialog", 1)
AND
LLLIB_QRY_Treasure_IsRegisteredObject(_Trader)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:DebugLevel] ","Dialog generation tag set, generating items for trader.");

IF
DialogStarted(_Dialog, _Instance)
AND
DialogGetInvolvedNPC(_Instance, 1, (CHARACTERGUID)_Trader)
AND
IsTagged(_Trader, "LLLIB_Treasure_GenerateOnDialog", 1)
AND
NOT LLLIB_QRY_Treasure_IsRegisteredObject(_Trader)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:DebugLevel][ERROR] ","Dialog generation tag set, but trader is not registered!");

/*
IF
CharacterUsedItem(_Player, ITEMGUID_LLLIB_DebugLever_TestRandom_d3152baa-c6d4-4e8e-a622-a6bb9c149b3e)
THEN
//Proc_StartDialog(0, "LLLIB_ModSettingsMenu", _Player, _Player);
LLLIB_ModSettings_SortMenus();
*/
IF
SkillCast(_Player, "Shout_RecoverArmour", _)
THEN
CharacterResetCooldowns(_Player);

IF
SkillCast(_Player, "Shout_RecoverArmour", _)
AND
DB_MyMod_ToggleStatus("INVISIBLE", _Player, _Val)
AND
IntegerSubtract(1, _Val, _NewVal)
THEN
NOT DB_MyMod_ToggleStatus("INVISIBLE", _Player, _Val);
DB_MyMod_ToggleStatus("INVISIBLE", _Player, _NewVal);

IF
SkillCast(_Player, "Shout_RecoverArmour", _)
AND
NOT DB_MyMod_ToggleStatus("INVISIBLE", _Player, _)
THEN
DB_MyMod_ToggleStatus("INVISIBLE", _Player, 1);

IF
DB_MyMod_ToggleStatus(_Status, _Player, 1)
THEN
ApplyStatus(_Player, _Status, -1.0, 1);

IF
DB_MyMod_ToggleStatus(_Status, _Player, 0)
THEN
RemoveStatus(_Player, _Status);

/*
IF
CharacterUsedItem(_, ITEMGUID_LLLIB_DebugLever_TestRandom_d3152baa-c6d4-4e8e-a622-a6bb9c149b3e)
AND
LLLIB_Random(1, 19)
AND
DB_LLLIB_Temp_RandomResult(_Ran)
AND
IntegertoString(_Ran, _RanStr)
THEN
NOT DB_LLLIB_Temp_RandomResult(_Ran);
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem] Random range result: ",_RanStr," | Min: 1 Max: 19");
*/

IF
GameStarted("TUT_Tutorial_A", _)
THEN
TimerLaunch("LLLIB_Debug_Timers_CheckLeaderTimer", 5000);

IF
TimerFinished("LLLIB_Debug_Timers_CheckLeaderTimer")
AND
DB_LLLIB_LeaderTrader(_LeaderTrader)
AND
ObjectExists(_LeaderTrader, 0)
THEN
TimerLaunch("LLLIB_Debug_Timers_NotifyMissingTrader", 1500);

IF
TimerFinished("LLLIB_Debug_Timers_CheckLeaderTimer")
AND
DB_LLLIB_LeaderTrader(_LeaderTrader)
AND
ObjectExists(_LeaderTrader, 1)
THEN
TimerLaunch("LLLIB_Debug_Timers_NotifyFoundTrader", 4000);

IF
StoryEvent(_, "LLLIB_Events_UpdateDatabases")
THEN
TimerLaunch("LLLIB_Debug_Timers_NotifyUpdateTimer", 4000);

IF
TimerFinished("LLLIB_Debug_Timers_NotifyUpdateTimer")
AND
DB_IsPlayer(_Player)
THEN
OpenMessageBox(_Player, "LeaderLib Updated");

IF
TimerFinished("LLLIB_Debug_Timers_NotifyMissingTrader")
AND
DB_IsPlayer(_Player)
THEN
OpenMessageBox(_Player, "Failed to find global leader trader.");

IF
TimerFinished("LLLIB_Debug_Timers_NotifyFoundTrader")
AND
DB_IsPlayer(_Player)
THEN
//OpenMessageBox(_Player, "Global leader trader found. Did it spawn?");
//TeleportTo(CHARACTERGUID_S_LLLIB_LeaderTrader_b15c8e24-0de0-4ab2-940d-751bf95f0f41, _Player);
LeaderLog_Log("DEBUG", "[LLLIB:LeaderTrader:Debug] Teleported Leader Trader to player.");
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LLLIB_9__Debug"
