Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
//DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
//DB_LLLIB_Treasure_RegisteredTrader(_TreasureID, _TraderID)
//DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)

//DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
//DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
//DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel)
//DB_LLLIB_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType)
//DB_LLLIB_Treasure_RegisteredGenerationTypes(_GenerationType)
//DB_LLLIB_Treasure_ItemGenerationFlag(_TreasureID, _ItemEntry, _Flag, _FlagType)
//DB_LLLIB_Treasure_ItemDeltaMods(_TreasureID, _ItemEntry, _Deltamod, _Chance)
//DB_LLLIB_Treasure_ItemRunes(_TreasureID, _ItemEntry, _Rune, _Chance)
//DB_LLLIB_Treasure_ItemMaxAmount(_TreasureID, _ItemEntry, _MaxAmount)

//DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntryOrTreasureTable, _OnCompletionEvent)
//DB_LLLIB_Treasure_GeneratedEvent(_TreasureID, _ItemEntry, _OnGeneratedEvent)

//DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate)
//DB_LLLIB_Treasure_GeneratorDummies(_Dummy)

//DB_LLLIB_Requirements_PartyLevel(_RequirementID, _MinLevel, _MaxLevel, _StrictMode)
//DB_LLLIB_Requirements_Flag(_RequirementID, _Flag, _FlagType, _FlagVal)

//DB_LLLIB_Treasure_Temp_DummyTarget(_Object, _Dummy, _ItemEntry, _TreasureID)
//DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
//DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID)
//DB_LLLIB_Treasure_Temp_FlagToTreasure(_Flag, _FlagType, _TreasureID)
//DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure(_GenerationType, _TreasureID)
//DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate)
//DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CurrentAmount, _MaxAmount, _IsStat)
//DB_LLLIB_Treasure_Temp_Queue_CountTemplate(_Object, _TreasureID, _ItemEntry, _GeneratedAmount, _RequirementID)
//DB_LLLIB_Treasure_Temp_Queue_CountStat(_Object, _TreasureID, _ItemTemplate, _ItemEntry, _GeneratedAmount, _RequirementID)
//DB_LLLIB_Treasure_Temp_StartGeneration(_Object, _TreasureID, _TimerName)
KBSECTION
//REGION UPDATING
PROC
LLLIB_System_UpdateDatabases()
THEN
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem] Databases updated.");

PROC
LLLIB_System_ClearDatabases()
THEN
SysClear("DB_LLLIB_Treasure_RegisteredObject", 2);
SysClear("DB_LLLIB_Treasure_RegisteredObjectTemplate", 2);
SysClear("DB_LLLIB_Treasure_RegisteredTrader", 2);
SysClear("DB_LLLIB_Treasure_RegisteredTreasureTable", 6);
SysClear("DB_LLLIB_Treasure_TreasureItemTemplates", 4);
SysClear("DB_LLLIB_Treasure_TreasureItemStats", 4);
SysClear("DB_LLLIB_Treasure_ItemGenerationSettings", 5);
SysClear("DB_LLLIB_Treasure_ItemGenerationType", 3);
SysClear("DB_LLLIB_Treasure_RegisteredGenerationTypes", 1);
SysClear("DB_LLLIB_Treasure_ItemGenerationFlag", 4);
SysClear("DB_LLLIB_Treasure_ItemDeltaMods", 4);
SysClear("DB_LLLIB_Treasure_ItemRunes", 4);
SysClear("DB_LLLIB_Treasure_ItemMaxAmount", 3);
SysClear("DB_LLLIB_Treasure_OnlyOnce", 3);
SysClear("DB_LLLIB_Treasure_GeneratedEvent", 3);
SysClear("DB_LLLIB_Treasure_StatToTemplate", 2);
SysClear("DB_LLLIB_Treasure_GeneratorDummies", 1);
SysClear("DB_LLLIB_Treasure_Temp_DummyTarget", 4);
SysClear("DB_LLLIB_Treasure_Temp_MatchedTreasure", 2);
SysClear("DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure", 2);
SysClear("DB_LLLIB_Treasure_Temp_FlagToTreasure", 3);
SysClear("DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure", 2);
SysClear("DB_LLLIB_Treasure_Temp_AmountToCreate", 3);
SysClear("DB_LLLIB_Treasure_Temp_GenerateItem", 6);
SysClear("DB_LLLIB_Treasure_Temp_Queue_CountTemplate", 5);
SysClear("DB_LLLIB_Treasure_Temp_Queue_CountStat", 6);
SysClear("DB_LLLIB_Treasure_Temp_StartGeneration", 3);
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem] Databases cleared.");

PROC
LLLIB_Updater_ResetDatabases()
THEN
SysClear("DB_LLLIB_Treasure_Temp_DummyTarget", 4);
SysClear("DB_LLLIB_Treasure_Temp_MatchedTreasure", 2);
SysClear("DB_LLLIB_Treasure_Temp_FlagToTreasure", 3);
SysClear("DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure", 2);
SysClear("DB_LLLIB_Treasure_Temp_AmountToCreate", 3);
SysClear("DB_LLLIB_Treasure_Temp_GenerateItem", 6);
SysClear("DB_LLLIB_Treasure_Temp_Queue_CountTemplate", 5);
SysClear("DB_LLLIB_Treasure_Temp_Queue_CountStat", 6);
SysClear("DB_LLLIB_Treasure_Temp_StartGeneration", 3);
//LLLIB_System_ClearDatabases();
LLLIB_System_UpdateDatabases();
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem] Temporary databases cleared.");
//END_REGION

//REGION GETTERS
QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
GetTemplate(_Object, _Template)
AND
DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure((GUIDSTRING)_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Traders_Spawned((CHARACTERGUID)_Object, _TraderID, _Level)
AND
DB_LLLIB_Treasure_RegisteredTrader(_TreasureID, _TraderID)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure((GUIDSTRING)_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureObject((STRING)_TreasureID, (STRING)_GenerationType)
THEN
LLLIB_Treasure_Internal_GetTreasureObject_ClearPreviousTemp(_TreasureID, _GenerationType);

PROC
LLLIB_Treasure_Internal_GetTreasureObject_ClearPreviousTemp((STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_Temp_MatchTemplate(_TreasureID, _Template, _GenerationType)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchTemplate(_TreasureID, _Template, _GenerationType);

PROC
LLLIB_Treasure_Internal_GetTreasureObject_ClearPreviousTemp((STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureObject((STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureObject((STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_RegisteredTrader(_TreasureID, _TraderID)
AND
DB_LLLIB_Traders_Spawned(_Trader, _TraderID, _Level)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Trader, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureObject((STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
AND
NOT DB_LLLIB_Treasure_Temp_MatchTemplate(_TreasureID, _Template, _GenerationType)
THEN
DB_LLLIB_Treasure_Temp_MatchTemplate(_TreasureID, _Template, _GenerationType);
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem] Launching iterators to find object with template [",_Template,"] for [",_TreasureID,":",_GenerationType,"]");
CharacterLaunchIterator("LLLIB_Events_Treasure_FindObject");
ItemLaunchIterator("LLLIB_Events_Treasure_FindObject");

IF
StoryEvent(_Object, "LLLIB_Events_Treasure_FindObject")
AND
GetTemplate(_Object, _Template)
AND
DB_LLLIB_Treasure_Temp_MatchTemplate(_TreasureID, _Template, _GenerationType)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);
LLLIB_Events_SendEvent("LLLIB_Events_Treasure_ContinueGeneration");

/*
IF
StoryEvent(NULL_00000000-0000-0000-0000-000000000000, "LLLIB_Events_Treasure_FindObject")
AND
DB_LLLIB_Treasure_Temp_MatchTemplate(_TreasureID, _Template)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchTemplate(_TreasureID, _Template);
*/

QRY
LLLIB_QRY_Treasure_GetTreasureObject((STRING)_TreasureID)
AND
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_, _TreasureID)
AND
DB_LLLIB_Treasure_RegisteredTrader(_TreasureID, _TraderID)
AND
DB_LLLIB_Traders_Spawned(_Object, _TraderID, _Level)
THEN
DB_LLLIB_Treasure_Temp_MatchedTreasure((GUIDSTRING)_Object, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureByGenerationType((STRING)_GenerationType)
AND
DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure(_GenerationType, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure(_GenerationType, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureByGenerationType((STRING)_GenerationType)
AND
DB_LLLIB_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType)
AND
NOT DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure(_GenerationType, _TreasureID)
THEN
DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure(_GenerationType, _TreasureID);

QRY
LLLIB_QRY_Treasure_GetTreasureByRequirement((STRING)_RequirementID)
AND
DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID);

QRY
LLLIB_QRY_Treasure_GetTreasureByRequirement((STRING)_RequirementID)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
NOT DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID)
THEN
DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID);

QRY
LLLIB_QRY_Treasure_GetTreasureByRequirement((STRING)_RequirementID)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
NOT DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID)
THEN
DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID);

QRY
LLLIB_QRY_Treasure_GetTreasureByRequirement((STRING)_RequirementID)
AND
DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)
AND
NOT DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID)
THEN
DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID);
//END_REGION

//REGION QUERIES_CHECKS
QRY
LLLIB_QRY_Treasure_IsRegisteredObject((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_RegisteredObject(_TreasureID, _Object)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_IsRegisteredObject((CHARACTERGUID)_Object)
AND
DB_LLLIB_Traders_Spawned(_Object, _TraderID, _Level)
AND
DB_LLLIB_Treasure_RegisteredTrader(_TreasureID, _TraderID)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_IsRegisteredObject((GUIDSTRING)_Object)
AND
NOT DB_LLLIB_Treasure_RegisteredObject(_, _Object)
AND
GetTemplate(_Object, _Template)
AND
DB_LLLIB_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_GenerationTypeIsDefault("DEFAULT")
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_GenerationTypeIsDefault("MANUAL")
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_GenerationTypeIsDefault("OPENED")
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_GenerationTypeIsDefault("TRADE_GENERATION_END")
THEN
DB_NOOP(1);


QRY
LLLIB_QRY_Treasure_ItemCanGenerate((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_RequirementID, (STRING)_GenerationType)
AND
NOT DB_LLLIB_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _)
AND
LLLIB_QRY_Treasure_GenerationTypeIsDefault(_GenerationType)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_ItemCanGenerate((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_RequirementID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_ObjectCanStartGeneration((GUIDSTRING)_Object)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 0)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 0)
THEN
DB_NOOP(1);

QRY
LLLIB_QRY_Treasure_TreasureHasGenerationType((STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_ItemGenerationType(_TreasureID, _, _GenerationType)
THEN
DB_NOOP(1);
//END_REGION

//REGION TREASURE_TABLE_GENERATION
PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
AND
NOT DB_LLLIB_Treasure_TableWasGenerated(_Object, _TreasureID, _TreasureTable)
AND
_UsePartyLevel > 0
AND
LeaderLog_QRY_Log("DEBUG", "Checking highest level")
AND
LLLIB_Helper_QRY_GetHighestLevelInParty()
AND
DB_LLLIB_Helper_Temp_HighestLevelInParty(_Level)
AND
LeaderLog_QRY_Log("DEBUG", "Creating backpack")
AND
CreateItemTemplateAtPosition("LOOT_BackPack_A_6c70c298-aa29-418f-a659-f8e0b5f5fa60", 0.0,0.0,0.0, _Backpack)
THEN
GenerateTreasure(_Backpack, _TreasureTable, _Level, NULL_00000000-0000-0000-0000-000000000000);
MoveAllItemsTo(_Backpack, _Object, 0, 0, 1);
ItemDestroy(_Backpack);
SetOnStage(_Backpack, 0);
LLLIB_Treasure_Internal_OnTreasureTableGenerated(_Object, _TreasureID, _TreasureTable);

PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)
AND
LLLIB_QRY_Requirements_AllMet(_RequirementID)
AND
NOT DB_LLLIB_Treasure_TableWasGenerated(_Object, _TreasureID, _TreasureTable)
AND
_UsePartyLevel <= 0
AND
LLLIB_Random(_MinLevel, _MaxLevel)
AND
DB_LLLIB_Temp_RandomResult(_Level)
AND
CreateItemTemplateAtPosition("LOOT_BackPack_A_6c70c298-aa29-418f-a659-f8e0b5f5fa60", 0.0,0.0,0.0, _Backpack)
THEN
GenerateTreasure(_Backpack, _TreasureTable, _Level, NULL_00000000-0000-0000-0000-000000000000);
MoveAllItemsTo(_Backpack, _Object, 0, 0, 1);
ItemDestroy(_Backpack);
SetOnStage(_Backpack, 0);
LLLIB_Treasure_Internal_OnTreasureTableGenerated(_Object, _TreasureID, _TreasureTable);

PROC
LLLIB_Treasure_Internal_OnTreasureTableGenerated((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_TreasureTable)
THEN
LLLIB_Treasure_MarkAsFinished(_Object, _TreasureID, _TreasureTable);
DB_LLLIB_Treasure_TableWasGenerated(_Object, _TreasureID, _TreasureTable);
//END_REGION

//REGION GENERATE_ITEMS
PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
LLLIB_Treasure_Internal_ProcessItemEntry(_Object, _TreasureID, _ItemEntry, _Amount, _RequirementID, _GenerationType, 0);

PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_GenerationType)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
LLLIB_Treasure_Internal_ProcessItemEntry(_Object, _TreasureID, _ItemEntry, _Amount, _RequirementID, _GenerationType, 1);

PROC
LLLIB_Treasure_Internal_ProcessItemEntry((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID, (STRING)_GenerationType, (INTEGER)_IsStat)
AND
LLLIB_QRY_Treasure_ItemCanGenerate(_TreasureID, _ItemEntry, _RequirementID, _GenerationType)
THEN
LLLIB_Treasure_Internal_StartItemGeneration(_Object, _TreasureID, _ItemEntry, _Amount, _RequirementID, _IsStat);

PROC
LLLIB_Treasure_Internal_StartItemGeneration((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID, (INTEGER)_IsStat)
AND
LLLIB_QRY_Treasure_SkipAmountCheck(_Object, _RequirementID)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:GenerateItems] Skipping amount check and generating item [",_TreasureID,"]:[",_ItemEntry,"].");
ObjectSetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 0);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _Amount, _IsStat);

PROC
LLLIB_Treasure_Internal_StartItemGeneration((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID, 0)
AND
NOT LLLIB_QRY_Treasure_SkipAmountCheck(_Object, _RequirementID)
AND
LLLIB_QRY_Treasure_CountTemplate(_Object, _TreasureID, _ItemEntry)
THEN
DB_LLLIB_Treasure_Temp_Queue_CountTemplate(_Object, _TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LLLIB_Treasure_Internal_StartItemGeneration((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID, 1)
AND
NOT LLLIB_QRY_Treasure_SkipAmountCheck(_Object, _RequirementID)
AND
NOT DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:Treasure:StartItemGeneration] Object is missing stat-based [",_TreasureID,"]:[",_ItemEntry,"] item template. Skipping counting.");
ObjectSetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 0);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _Amount, 1);

PROC
LLLIB_Treasure_Internal_StartItemGeneration((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID, 1)
AND
NOT LLLIB_QRY_Treasure_SkipAmountCheck(_Object, _RequirementID)
AND
DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate)
AND
LLLIB_QRY_Treasure_CountTemplateWithStat(_Object, _TreasureID, _ItemTemplate, _ItemEntry)
THEN
DB_LLLIB_Treasure_Temp_Queue_CountStat(_Object, _TreasureID, _ItemTemplate, _ItemEntry, _Amount, _RequirementID);

PROC
LLLIB_Treasure_Internal_StartItemGeneration((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID, (INTEGER)_IsStat)
AND
LLLIB_QRY_Treasure_CountedItems(_Object, _TreasureID, _ItemEntry)
THEN
//LeaderLog_Log("DEBUG", "[LLLIB:Treasure:StartItemGeneration] Object counting complete [",_TreasureID,"]:[",_ItemEntry,"].");
LLLIB_Treasure_Internal_CountingComplete(_Object, _TreasureID, _ItemEntry);

IF
DB_LLLIB_Treasure_Temp_GenerateItem((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
THEN
LLLIB_Treasure_Internal_GenerateItemNow(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount, _IsStat);

PROC
LLLIB_Treasure_Internal_GenerateItemNow((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
AND
_IsStat <= 0
AND
_CreatedAmount < _MaxAmount
AND
IntegerSum(_CreatedAmount, 1, _NextAmount)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:GenerateItems] Generating item [",_TreasureID,"]:[",_ItemEntry,"].");
ItemTemplateAddTo(_ItemEntry, _Object, 1);
NOT DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount, _IsStat);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _NextAmount, _MaxAmount, _IsStat);

PROC
LLLIB_Treasure_Internal_GenerateItemNow((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
AND
_IsStat > 0
AND
_CreatedAmount < _MaxAmount
AND
IntegerSum(_CreatedAmount, 1, _NextAmount)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:GenerateItems] Generating stat item [",_TreasureID,"]:[",_ItemEntry,"].");
LLLIB_Treasure_Internal_CreateItemByStat(_Object, _ItemEntry, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount, _IsStat);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _NextAmount, _MaxAmount, _IsStat);

PROC
LLLIB_Treasure_Internal_GenerateItemNow((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
AND
_CreatedAmount >= _MaxAmount
AND
_IsStat <= 0
THEN
LLLIB_Treasure_MarkAsFinished(_Object, _ItemEntry, _TreasureID);

IF
DB_LLLIB_Treasure_Temp_GenerateItem((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID, (INTEGER)_CreatedAmount, (INTEGER)_MaxAmount, (INTEGER)_IsStat)
AND
_CreatedAmount >= _MaxAmount
THEN
NOT DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, _CreatedAmount, _MaxAmount, _IsStat);

PROC
LLLIB_Treasure_MarkAsFinished((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID)
THEN
LLLIB_Treasure_SendGeneratedEvent(_Object, _TreasureID, _ItemEntry);
LLLIB_Treasure_RemoveIfOnlyOnce(_Object, _TreasureID, _ItemEntry);
ObjectSetFlag(_Object, "LLLIB_Treasure_GenerationSuccessful", 0);

PROC
LLLIB_Treasure_MarkAsFinished((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID)
AND
GetUUID(_Object, _ID)
AND
StringConcatenate("LLLIB_Treasure_ResetIstGeneratingFlagTimer_", _ID, _TimerName)
AND
NOT DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName)
THEN
DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName);
TimerLaunch(_TimerName, 500);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName)
THEN
ObjectClearFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure");
NOT DB_LLLIB_Treasure_Temp_ResetGeneratedFlagTimer(_Object, _TimerName);
SetStoryEvent(_Object, "LLLIB_Events_Treasure_GenerationFinished");
//LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:ResetGeneratedFlagTimer] Flag and database Temp_MatchedTreasure cleared.");
//END_REGION

//REGION ITEM_AMOUNT_COUNTING
PROC
LLLIB_Treasure_Internal_CountingComplete((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_Temp_Queue_CountTemplate(_Object, _TreasureID, _ItemEntry, _GeneratedAmount, _RequirementID)
AND
DB_LLLIB_Treasure_Temp_ItemTemplateAmount(_Object, _TreasureID, _ItemEntry, _CurrentAmount)
AND
LLLIB_QRY_Treasure_Debug_CompareAmounts(_TreasureID, _ItemEntry, _GeneratedAmount, _CurrentAmount)
AND
LLLIB_QRY_Treasure_ItemLimitNotMet(_Object, _TreasureID, _ItemEntry, _RequirementID, _GeneratedAmount, _CurrentAmount)
AND
DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate)
THEN
//LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:CountingComplete] Counting complete. Generating item by template.");
ObjectSetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 0);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _AmountToCreate, 0);
NOT DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate);
NOT DB_LLLIB_Treasure_Temp_ItemTemplateAmount(_Object, _TreasureID, _ItemEntry, _CurrentAmount);
NOT DB_LLLIB_Treasure_Temp_Queue_GenerateTemplateItem(_Object, _TreasureID, _ItemEntry, _GeneratedAmount, _RequirementID);

PROC
LLLIB_Treasure_Internal_CountingComplete((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_Temp_Queue_CountStat(_Object, _TreasureID, _ItemTemplate, _ItemEntry, _GeneratedAmount, _RequirementID)
AND
DB_LLLIB_Treasure_Temp_ItemStatAmount(_Object, _TreasureID, _ItemTemplate, _ItemEntry, _CurrentAmount)
AND
LLLIB_QRY_Treasure_ItemLimitNotMet(_Object, _TreasureID, _ItemEntry, _RequirementID, _GeneratedAmount, _CurrentAmount)
AND
DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate)
THEN
//LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:CountingComplete] Counting complete. Generating item by stat.");
ObjectSetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 0);
DB_LLLIB_Treasure_Temp_GenerateItem(_Object, _ItemEntry, _TreasureID, 0, _AmountToCreate, 1);
NOT DB_LLLIB_Treasure_Temp_AmountToCreate(_Object, _ItemEntry, _AmountToCreate);
NOT DB_LLLIB_Treasure_Temp_ItemStatAmount(_Object, _TreasureID, _ItemTemplate, _ItemEntry, _CurrentAmount);
NOT DB_LLLIB_Treasure_Temp_Queue_GenerateStatItem(_Object, _TreasureID, _ItemEntry, _ItemTemplate, _GeneratedAmount, _RequirementID);
//END_REGION

//REGION GENERATING_BY_STAT
PROC
LLLIB_Treasure_Internal_CreateItemByStat((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID)
AND
LLLIB_QRY_Treasure_PrepareGeneratorDummy()
AND
DB_LLLIB_Treasure_GeneratorDummies(_Dummy)
THEN
DB_LLLIB_Treasure_Temp_DummyTarget(_Object, _Dummy, _ItemEntry, _TreasureID);
//SetVarObject(_Dummy, "LLLIB_Treasure_ObjectTarget", _Object);
SetVarFixedString(_Dummy, "LLLIB_Treasure_ItemStat", _ItemEntry);
SetStoryEvent(_Dummy, "LLLIB_Events_Treasure_GenerateByStat");
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:StatItemGen] Created item by stat.");

PROC
LLLIB_Treasure_Internal_CreateItemByStat((GUIDSTRING)_Object, (STRING)_ItemEntry, (STRING)_TreasureID)
AND
NOT DB_LLLIB_Treasure_GeneratorDummies(_)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:StatItemGen][ERROR] Error creating item by stat: No generator dummy found!");

QRY
LLLIB_QRY_Treasure_PrepareGeneratorDummy()
AND
DB_LLLIB_Treasure_GeneratorDummies(_Dummy)
AND
ObjectExists(_Dummy, 0)
THEN
NOT DB_LLLIB_Treasure_GeneratorDummies(_Dummy);

QRY
LLLIB_QRY_Treasure_PrepareGeneratorDummy()
AND
DB_LLLIB_Treasure_GeneratorDummies(_Dummy)
AND
ObjectExists(_Dummy, 1)
AND
ObjectIsOnStage(_Dummy, 0)
THEN
SetOnStage(_Dummy, 1);

QRY
LLLIB_QRY_Treasure_PrepareGeneratorDummy()
THEN
LLLIB_Treasure_Internal_CreateGeneratorDummy();

PROC
LLLIB_Treasure_Internal_CreateGeneratorDummy()
AND
NOT DB_LLLIB_Treasure_GeneratorDummies(_)
AND
TemporaryCharacterCreateAtPosition(0.0,0.0,0.0,"LLLIB_GeneratorDummy_24a5d60b-680b-4fbc-9b2c-19061a261297", 0, _Dummy)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:PrepareGeneratorDummy] Generator dummy created.");
DB_LLLIB_Treasure_GeneratorDummies(_Dummy);

IF
ItemAddedToCharacter(_Item, _Dummy)
AND
GetTemplate(_Dummy, "LLLIB_GeneratorDummy_24a5d60b-680b-4fbc-9b2c-19061a261297")
AND
ObjectGetFlag(_Dummy, "LLLIB_GeneratorDummy_CreatedItem", 1)
AND
GetVarFixedString(_Dummy, "LLLIB_Treasure_ItemStat", _ItemEntry)
AND
DB_LLLIB_Treasure_Temp_DummyTarget(_Object, _Dummy, _ItemEntry, _TreasureID)
AND
ItemGetAmount(_Item, _Amount)
THEN
ItemToInventory(_Item, _Object, _Amount, 0, 1);
SetVarFixedString(_Item, "LLLIB_GeneratedItemStat", _ItemEntry);
SetVarFixedString(_Dummy, "LLLIB_Treasure_ItemStat", "");
NOT DB_LLLIB_Treasure_Temp_DummyTarget(_Object, _Dummy, _ItemEntry);
LLLIB_Treasure_MarkAsFinished(_Object, _ItemEntry, _TreasureID);
ObjectClearFlag(_Dummy, "LLLIB_GeneratorDummy_CreatedItem");
//LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:StatItem] Stat item [",_ItemEntry,"] sent to target.");
//END_REGION

//REGION POST_GENERATION
IF
ItemAddedToCharacter(_Item, _Object)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_OnAdded(_Object, _Item, _TreasureID);

IF
ItemAddedToContainer(_Item, _Object)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_OnAdded(_Object, _Item, _TreasureID);

IF
ItemAddedToContainer(_Item, _Object)
AND
GetVarFixedString(_Item, "LLLIB_GeneratedItemStat", _ItemEntry)
AND
GetStatString(_Item, _Stat)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:OnAdded(Debug)] Item with saved stat ",_ItemEntry,"(",_Stat,") added to container.");

PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item, (STRING)_TreasureID)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 1)
AND
GetTemplate(_Item, _ItemEntry)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
LLLIB_Treasure_AdjustItemLevel(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_ApplyDeltaMods(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_InsertRunes(_Item, _TreasureID, _ItemEntry);
//LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:OnAdded(TemplateItem] Adjusted treasure level, delta mods, and runes.");

PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item, (STRING)_TreasureID)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 1)
AND
GetVarFixedString(_Item, "LLLIB_GeneratedItemStat", _ItemEntry)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
GetTemplate(_Item, _ItemTemplate)
THEN
//Link the stat to the template for easier amount retrieval later, hopefully.
DB_LLLIB_Treasure_StatToTemplate(_ItemEntry, _ItemTemplate);
LLLIB_Treasure_AdjustItemLevel(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_ApplyDeltaMods(_Item, _TreasureID, _ItemEntry);
LLLIB_Treasure_InsertRunes(_Item, _TreasureID, _ItemEntry);
//LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:OnAdded(StatItem)] Adjusted treasure level, delta mods, and runes.");

PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item, (STRING)_TreasureID)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 1)
AND
GetVarFixedString(_Item, "LLLIB_GeneratedItemStat", _ItemEntry)
AND
DB_LLLIB_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
AND
NOT GetTemplate(_Item, _)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem:OnAdded(StatItem)][ERROR] Couldn't find a template for item with stat ", _ItemEntry);

/*
PROC
LLLIB_Treasure_OnAdded((GUIDSTRING)_Object, (ITEMGUID)_Item)
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 1)
THEN
//LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem] Treasure added.");
*/

PROC
LLLIB_Treasure_SendGeneratedEvent((GUIDSTRING)_Owner, (STRING)_OwnerID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_GeneratedEvent(_OwnerID, _ItemEntry, _OnGeneratedEvent)
THEN
SetStoryEvent(_Owner, _OnGeneratedEvent);

PROC
LLLIB_Treasure_RemoveIfOnlyOnce((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent)
AND
DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
NOT DB_LLLIB_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LLLIB_Treasure_RemoveIfOnlyOnce((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_GenerationEnded");
SetStoryEvent(_Object, _OnCompletionEvent);

PROC
LLLIB_Treasure_DisableGenerationForObject((GUIDSTRING)_Object)
AND
IsTagged(_Object, "LLLIB_Treasure_GenerateEndlessly", 0)
THEN
ObjectSetFlag(_Object, "LLLIB_Treasure_GenerationEnded");

IF
ObjectWasTagged(_Object, "LLLIB_Treasure_GenerateEndlessly")
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_GenerationEnded", 1)
THEN
ObjectClearFlag(_Object, "LLLIB_Treasure_GenerationEnded");
//END_REGION

//REGION ITEM_POSTGEN_MODIFIERS
PROC
LLLIB_Treasure_AdjustItemLevel((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _UsePartyLevel, _MinLevel, _MaxLevel)
AND
_UsePartyLevel > 0
AND
LLLIB_Helper_QRY_GetHighestLevelInParty()
AND
DB_LLLIB_Helper_Temp_HighestLevelInParty(_Level)
THEN
ItemLevelUpTo(_Item, _Level);

PROC
LLLIB_Treasure_AdjustItemLevel((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemGenerationSettings(_TreasureID, _ItemEntry, _UsePartyLevel, _MinLevel, _MaxLevel)
AND
_UsePartyLevel <= 0
AND
LLLIB_Random(_MinLevel, _MaxLevel)
AND
DB_LLLIB_Temp_RandomResult(_Level)
THEN
ItemLevelUpTo(_Item, _Level);
NOT DB_LLLIB_Temp_RandomResult(_Level);

PROC
LLLIB_Treasure_ApplyDeltaMods((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemDeltaMods(_TreasureID, _ItemEntry, _Deltamod, _Chance)
AND
NOT ItemHasDeltaModifier(_Item, _Deltamod, _)
AND
LLLIB_Random(100)
AND
DB_LLLIB_Temp_RandomResult(_Roll)
AND
_Roll <= _Chance
THEN
ItemAddDeltaModifier(_Item, _Deltamod);
NOT DB_LLLIB_Temp_RandomResult(_Roll);

PROC
LLLIB_Treasure_InsertRunes((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
NOT DB_LLLIB_Treaasure_Temp_RuneSlot(_Item,_)
THEN
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, 0);

PROC
LLLIB_Treasure_InsertRunes((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treasure_ItemRunes(_TreasureID, _ItemEntry, _Rune, _Chance)
AND
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot)
AND
LLLIB_Treasure_QRY_InsertRuneInSlot(_Item, _Rune, _Slot, _Chance)
AND
IntegerSum(_Slot, 1, _NextSlot)
THEN
NOT DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot);
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _NextSlot);

QRY
LLLIB_Treasure_QRY_InsertRuneInSlot((ITEMGUID)_Item, (STRING)_Rune, (INTEGER)_Slot, (INTEGER)_Chance)
AND
NOT ItemGetRuneItemTemplate(_Item, _Slot, _)
AND
LLLIB_Random(100)
AND
DB_LLLIB_Temp_RandomResult(_Roll)
AND
_Roll <= _Chance
THEN
LLLIB_Treasure_Internal_DummyInsertRune(_Item, _Rune, _Slot);
NOT DB_LLLIB_Temp_RandomResult(_Roll);

PROC
LLLIB_Treasure_Internal_DummyInsertRune((ITEMGUID)_Item, (STRING)_Rune, (INTEGER)_Slot)
AND
DB_LLLIB_Treasure_GeneratorDummies(_Dummy)
THEN
ItemInsertRune((CHARACTERGUID)_Dummy, _Item, _Rune, _Slot);

PROC
LLLIB_Treasure_InsertRunes((ITEMGUID)_Item, (STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot)
THEN
NOT DB_LLLIB_Treaasure_Temp_RuneSlot(_Item, _Slot);
//END_REGION

//REGION GENERATION_EVENTS
//Containers
IF
//ItemOpened(_Object)
CharacterUsedItem(_, _Object)
AND
IsTagged(_Object, "LLLIB_Item_IgnoreOpened", 0)
AND
LLLIB_QRY_Treasure_ObjectCanStartGeneration((GUIDSTRING)_Object)
AND
ItemIsContainer((ITEMGUID)_Object, 1)
AND
LLLIB_QRY_Treasure_GetTreasureID((GUIDSTRING)_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
//AND
//Don't check the IteMGenerationType database since this is the default way for containers
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "OPENED");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
ObjectFlagSet("LLLIB_Treasure_GenerateNow", _Object, _)
AND
LLLIB_Helper_QRY_ClearObjectFlag(_Object, "LLLIB_Treasure_GenerateNow")
AND
ObjectGetFlag(_Object, "LLLIB_Treasure_IsGeneratingTreasure", 0)
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "MANUAL");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
TradeGenerationStarted(_Object)
AND
DB_LLLIB_Treasure_RegisteredGenerationTypes("TRADE_GENERATION_START")
AND
IsTagged(_Object, "LLLIB_Trader_IgnoreTradeGeneration", 0)
AND
LLLIB_QRY_Treasure_ObjectCanStartGeneration((GUIDSTRING)_Object)
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
AND
LLLIB_QRY_Treasure_TreasureHasGenerationType(_TreasureID, "TRADE_GENERATION_START")
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "TRADE_GENERATION_START");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
TradeGenerationEnded(_Object)
AND
IsTagged(_Object, "LLLIB_Trader_IgnoreTradeGeneration", 0)
AND
LLLIB_QRY_Treasure_ObjectCanStartGeneration((GUIDSTRING)_Object)
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
//AND
//Skip this check since it's the default generation for traders
//LLLIB_QRY_Treasure_TreasureHasGenerationType(_TreasureID, "TRADE_GENERATION_END")
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "TRADE_GENERATION_END");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
DialogStarted(_Dialog, _Instance)
AND
DB_LLLIB_Treasure_RegisteredGenerationTypes("DIALOG_STARTED")
AND
DialogGetInvolvedNPC(_Instance, 1, _Object)
AND
IsTagged(_Object, "LLLIB_Trader_GenerateOnDialog", 1)
AND
LLLIB_QRY_Treasure_ObjectCanStartGeneration((GUIDSTRING)_Object)
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
AND
LLLIB_QRY_Treasure_TreasureHasGenerationType(_TreasureID, "DIALOG_STARTED")
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "DIALOG_STARTED");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
DialogEnded(_Dialog, _Instance)
AND
DB_LLLIB_Treasure_RegisteredGenerationTypes("DIALOG_ENDED")
AND
DialogGetInvolvedNPC(_Instance, 1, _Object)
AND
IsTagged(_Object, "LLLIB_Trader_GenerateOnDialog", 1)
AND
LLLIB_QRY_Treasure_ObjectCanStartGeneration((GUIDSTRING)_Object)
AND
LLLIB_QRY_Treasure_GetTreasureID(_Object)
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
AND
LLLIB_QRY_Treasure_TreasureHasGenerationType(_TreasureID, "DIALOG_ENDED")
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "DIALOG_ENDED");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

IF
ObjectFlagSet(_Flag, _, _)
THEN
LLLIB_Treasure_Internal_GenerateByFlag(_Flag, "Object");

IF
GlobalFlagSet(_Flag)
THEN
LLLIB_Treasure_Internal_GenerateByFlag(_Flag, "Global");

IF
GameStarted(_,_)
THEN
//Give some time for other mods to register treasure
TimerLaunch("LLLIB_Timers_Treasure_LevelLoadedTreasureTimer", 2000);

IF
TimerFinished("LLLIB_Timers_Treasure_LevelLoadedTreasureTimer")
AND
DB_LLLIB_Treasure_RegisteredGenerationTypes("LEVEL_LOADED")
AND
LLLIB_QRY_Treasure_GetTreasureByGenerationType("LEVEL_LOADED")
AND
DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure("LEVEL_LOADED", _TreasureID)
AND
LLLIB_QRY_Treasure_GetTreasureObject(_TreasureID, "LEVEL_LOADED")
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "LEVEL_LOADED");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure("LEVEL_LOADED", _TreasureID);

IF
CharacterLeveledUp(_Player)
AND
CharacterIsPlayer(_Player, 1)
THEN
TimerCancel("LLLIB_Timers_Treasure_LevelUpTreasureTimer");
TimerLaunch("LLLIB_Timers_Treasure_LevelUpTreasureTimer", 1000);

IF
TimerFinished("LLLIB_Timers_Treasure_LevelUpTreasureTimer")
AND
DB_LLLIB_Treasure_RegisteredGenerationTypes("PARTY_LEVELED_UP")
AND
LLLIB_QRY_Treasure_GetTreasureByGenerationType("PARTY_LEVELED_UP")
AND
DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure("PARTY_LEVELED_UP", _TreasureID)
AND
LLLIB_QRY_Treasure_GetTreasureObject(_TreasureID, "PARTY_LEVELED_UP")
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
AND
NOT DB_LLLIB_Treasure_Temp_PartyLeveledUpGenerationTimer(_, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "PARTY_LEVELED_UP");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);
NOT DB_LLLIB_Treasure_Temp_GenerationTypeToTreasure("PARTY_LEVELED_UP", _TreasureID);

//When an object is found by its registered treasure ID and template
IF
StoryEvent(_, "LLLIB_Events_Treasure_ContinueGeneration")
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
AND
DB_LLLIB_Treasure_Temp_MatchTemplate(_TreasureID, _Template, _GenerationType)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, _GenerationType);
NOT DB_LLLIB_Treasure_Temp_MatchTemplate(_TreasureID, _Template, _GenerationType);
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

//To prevent multiple generation events when more than one player levels up at the same time
PROC
LLLIB_Treasure_GenerateItems((GUIDSTRING)_Object, (STRING)_TreasureID, "PARTY_LEVELED_UP")
AND
NOT DB_LLLIB_Treasure_Temp_PartyLeveledUpGenerationTimer(_, _TreasureID)
AND
StringConcatenate("LLLIB_Timers_Treasure_PartyLeveledUpGenerationBlocker_", _TreasureID, _TimerName)
THEN
DB_LLLIB_Treasure_Temp_PartyLeveledUpGenerationTimer(_TimerName, _TreasureID);
TimerLaunch(_TimerName, 2000);

IF
TimerFinished(_TimerName)
AND
DB_LLLIB_Treasure_Temp_PartyLeveledUpGenerationTimer(_TimerName, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_PartyLeveledUpGenerationTimer(_TimerName, _TreasureID);

IF
DB_LLLIB_Requirements_JustUnlocked(_RequirementID)
THEN
LLLIB_Treasure_Internal_GenerateFromRequirement(_RequirementID);

PROC
LLLIB_Treasure_Internal_GenerateFromRequirement((STRING)_RequirementID)
AND
DB_LLLIB_Treasure_RegisteredGenerationTypes("REQUIREMENT_UNLOCKED")
AND
LLLIB_QRY_Treasure_GetTreasureByRequirement(_RequirementID)
AND
DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID)
AND
LLLIB_QRY_Treasure_TreasureHasGenerationType(_TreasureID, "REQUIREMENT_UNLOCKED")
AND
LLLIB_QRY_Treasure_GetTreasureObject(_TreasureID, "REQUIREMENT_UNLOCKED")
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:TreasureSystem] Generating [",_TreasureID,"] due to requirement [",_RequirementID,"] unlocking.");
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "REQUIREMENT_UNLOCKED");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);

PROC
LLLIB_Treasure_Internal_GenerateFromRequirement((STRING)_RequirementID)
AND
DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID)
THEN
NOT DB_LLLIB_Treasure_Temp_MatchedRequirementTreasure(_TreasureID, _RequirementID);
//END_REGION

//REGION TREASURE_FLAG_GEN
QRY
LLLIB_QRY_Treasure_IsGenerationFlag((STRING)_Flag, (STRING)_FlagType)
AND
DB_LLLIB_Treasure_Temp_FlagToTreasure(_Flag, _FlagType, _TreasureID)
THEN
NOT DB_LLLIB_Treasure_Temp_FlagToTreasure(_Flag, _FlagType, _TreasureID);

QRY
LLLIB_QRY_Treasure_IsGenerationFlag((STRING)_Flag, (STRING)_FlagType)
AND
DB_LLLIB_Treasure_ItemGenerationFlag(_TreasureID, _ItemEntry, _Flag, _FlagType)
AND
NOT DB_LLLIB_Treasure_Temp_FlagToTreasure(_Flag, _FlagType, _TreasureID)
THEN
DB_LLLIB_Treasure_Temp_FlagToTreasure(_Flag, _FlagType, _TreasureID);

PROC
LLLIB_Treasure_Internal_GenerateByFlag((STRING)_Flag, (STRING)_FlagType)
AND
DB_LLLIB_Treasure_RegisteredGenerationTypes("FLAG")
AND
LLLIB_QRY_Treasure_IsGenerationFlag(_Flag, _FlagType)
AND
DB_LLLIB_Treasure_Temp_FlagToTreasure(_Flag, _FlagType, _TreasureID)
AND
LLLIB_QRY_Treasure_GetTreasureObject(_TreasureID, "FLAG")
AND
DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID)
THEN
LLLIB_Treasure_GenerateItems(_Object, _TreasureID, "FLAG");
NOT DB_LLLIB_Treasure_Temp_MatchedTreasure(_Object, _TreasureID);
//END_REGION

//REGION CONTAINERS
IF
ObjectFlagSet("LLLIB_Treasure_GenerationSuccessful", _Object, _)
AND
ItemIsContainer((ITEMGUID)_Object, 1)
THEN
LLLIB_Treasure_DisableGenerationForObject((GUIDSTRING)_Object);
ObjectClearFlag(_Object, "LLLIB_Treasure_GenerationSuccessful");
//END_REGION

//REGION DEBUG
/*
QRY
LLLIB_QRY_Treasure_Debug_CompareAmounts((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_GeneratedAmount, (INTEGER)_CurrentAmount)
AND
IntegertoString(_GeneratedAmount, _GenStr)
AND
IntegertoString(_CurrentAmount, _CurStr)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:Treasure:Debug] Comparing item amounts for [",_TreasureID,":",_ItemEntry,"] - ",_CurStr,"/",_GenStr);
*/

QRY
LLLIB_QRY_Treasure_Debug_CompareAmounts((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_GeneratedAmount, (INTEGER)_CurrentAmount)
THEN
DB_NOOP(1);

PROC
LLLIB_Treasure_CountItems((GUIDSTRING)_Object, (STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_GeneratedAmount, (STRING)_RequirementID, (INTEGER)_IsStat)
AND
_IsStat <= 0
AND
ItemTemplateIsInCharacterInventory((CHARACTERGUID)_Object, _ItemEntry, _Val)
AND
IntegertoString(_Val, _ValStr)
AND
GetTemplate(_Object, _Template)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:Treasure:CountItems] Item template [",_TreasureID,"]:[",_ItemEntry,"][",_Template,"] found = ", _ValStr);

/*
IF
StoryEvent(_Object, _Event)
THEN
LeaderLog_Log("DEBUG", "[LLLIB:Treasure:Debug] Debugging event [",_Event,"]. It is the completion event?");
*/
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
